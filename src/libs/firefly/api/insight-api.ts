/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00 
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InsightGroup } from '../model';
// @ts-ignore
import { InsightTotal } from '../model';
// @ts-ignore
import { InsightTransfer } from '../model';
/**
 * InsightApi - axios parameter creator
 * @export
 */
export const InsightApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint gives a summary of the expenses made by the user, grouped by asset account. 
         * @summary Insight into expenses, grouped by asset account.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseAsset: async (start: string, end: string, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightExpenseAsset', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightExpenseAsset', 'end', end)
            const localVarPath = `/api/v1/insight/expense/asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, grouped by (any) bill. 
         * @summary Insight into expenses, grouped by bill.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [bills] The bills to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseBill: async (start: string, end: string, bills?: Array<number>, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightExpenseBill', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightExpenseBill', 'end', end)
            const localVarPath = `/api/v1/insight/expense/bill`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (bills) {
                localVarQueryParameter['bills[]'] = bills;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, grouped by (any) budget. 
         * @summary Insight into expenses, grouped by budget.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [budgets] The budgets to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseBudget: async (start: string, end: string, budgets?: Array<number>, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightExpenseBudget', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightExpenseBudget', 'end', end)
            const localVarPath = `/api/v1/insight/expense/budget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (budgets) {
                localVarQueryParameter['budgets[]'] = budgets;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, grouped by (any) category. 
         * @summary Insight into expenses, grouped by category.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [categories] The categories to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseCategory: async (start: string, end: string, categories?: Array<number>, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightExpenseCategory', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightExpenseCategory', 'end', end)
            const localVarPath = `/api/v1/insight/expense/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (categories) {
                localVarQueryParameter['categories[]'] = categories;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, grouped by expense account. 
         * @summary Insight into expenses, grouped by expense account.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you add the accounts ID\&#39;s of expense accounts, only those accounts are included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. You can combine both asset / liability and expense account ID\&#39;s. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseExpense: async (start: string, end: string, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightExpenseExpense', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightExpenseExpense', 'end', end)
            const localVarPath = `/api/v1/insight/expense/expense`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, including only expenses with no bill. 
         * @summary Insight into expenses, without bill.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseNoBill: async (start: string, end: string, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightExpenseNoBill', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightExpenseNoBill', 'end', end)
            const localVarPath = `/api/v1/insight/expense/no-bill`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, including only expenses with no budget. 
         * @summary Insight into expenses, without budget.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseNoBudget: async (start: string, end: string, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightExpenseNoBudget', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightExpenseNoBudget', 'end', end)
            const localVarPath = `/api/v1/insight/expense/no-budget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, including only expenses with no category. 
         * @summary Insight into expenses, without category.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseNoCategory: async (start: string, end: string, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightExpenseNoCategory', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightExpenseNoCategory', 'end', end)
            const localVarPath = `/api/v1/insight/expense/no-category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, including only expenses with no tag. 
         * @summary Insight into expenses, without tag.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseNoTag: async (start: string, end: string, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightExpenseNoTag', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightExpenseNoTag', 'end', end)
            const localVarPath = `/api/v1/insight/expense/no-tag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, grouped by (any) tag. 
         * @summary Insight into expenses, grouped by tag.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [tags] The tags to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseTag: async (start: string, end: string, tags?: Array<number>, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightExpenseTag', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightExpenseTag', 'end', end)
            const localVarPath = `/api/v1/insight/expense/tag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (tags) {
                localVarQueryParameter['tags[]'] = tags;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a sum of the total expenses made by the user. 
         * @summary Insight into total expenses.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseTotal: async (start: string, end: string, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightExpenseTotal', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightExpenseTotal', 'end', end)
            const localVarPath = `/api/v1/insight/expense/total`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a summary of the income received by the user, grouped by asset account. 
         * @summary Insight into income, grouped by asset account.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightIncomeAsset: async (start: string, end: string, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightIncomeAsset', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightIncomeAsset', 'end', end)
            const localVarPath = `/api/v1/insight/income/asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a summary of the income received by the user, grouped by (any) category. 
         * @summary Insight into income, grouped by category.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [categories] The categories to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightIncomeCategory: async (start: string, end: string, categories?: Array<number>, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightIncomeCategory', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightIncomeCategory', 'end', end)
            const localVarPath = `/api/v1/insight/income/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (categories) {
                localVarQueryParameter['categories[]'] = categories;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a summary of the income received by the user, including only income with no category. 
         * @summary Insight into income, without category.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightIncomeNoCategory: async (start: string, end: string, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightIncomeNoCategory', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightIncomeNoCategory', 'end', end)
            const localVarPath = `/api/v1/insight/income/no-category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a summary of the income received by the user, including only income with no tag. 
         * @summary Insight into income, without tag.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightIncomeNoTag: async (start: string, end: string, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightIncomeNoTag', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightIncomeNoTag', 'end', end)
            const localVarPath = `/api/v1/insight/income/no-tag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a summary of the income received by the user, grouped by revenue account. 
         * @summary Insight into income, grouped by revenue account.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you add the accounts ID\&#39;s of revenue accounts, only those accounts are included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. You can combine both asset / liability and deposit account ID\&#39;s. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightIncomeRevenue: async (start: string, end: string, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightIncomeRevenue', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightIncomeRevenue', 'end', end)
            const localVarPath = `/api/v1/insight/income/revenue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a summary of the income received by the user, grouped by (any) tag. 
         * @summary Insight into income, grouped by tag.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [tags] The tags to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightIncomeTag: async (start: string, end: string, tags?: Array<number>, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightIncomeTag', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightIncomeTag', 'end', end)
            const localVarPath = `/api/v1/insight/income/tag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (tags) {
                localVarQueryParameter['tags[]'] = tags;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a sum of the total income received by the user. 
         * @summary Insight into total income.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightIncomeTotal: async (start: string, end: string, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightIncomeTotal', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightIncomeTotal', 'end', end)
            const localVarPath = `/api/v1/insight/income/total`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a summary of the transfers made by the user, grouped by (any) category. 
         * @summary Insight into transfers, grouped by category.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [categories] The categories to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightTransferCategory: async (start: string, end: string, categories?: Array<number>, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightTransferCategory', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightTransferCategory', 'end', end)
            const localVarPath = `/api/v1/insight/transfer/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (categories) {
                localVarQueryParameter['categories[]'] = categories;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a summary of the transfers made by the user, including only transfers with no category. 
         * @summary Insight into transfers, without category.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightTransferNoCategory: async (start: string, end: string, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightTransferNoCategory', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightTransferNoCategory', 'end', end)
            const localVarPath = `/api/v1/insight/transfer/no-category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a summary of the transfers made by the user, including only transfers with no tag. 
         * @summary Insight into expenses, without tag.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightTransferNoTag: async (start: string, end: string, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightTransferNoTag', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightTransferNoTag', 'end', end)
            const localVarPath = `/api/v1/insight/transfer/no-tag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a summary of the transfers created by the user, grouped by (any) tag. 
         * @summary Insight into transfers, grouped by tag.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [tags] The tags to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightTransferTag: async (start: string, end: string, tags?: Array<number>, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightTransferTag', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightTransferTag', 'end', end)
            const localVarPath = `/api/v1/insight/transfer/tag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (tags) {
                localVarQueryParameter['tags[]'] = tags;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a sum of the total amount transfers made by the user. 
         * @summary Insight into total transfers.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightTransferTotal: async (start: string, end: string, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightTransferTotal', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightTransferTotal', 'end', end)
            const localVarPath = `/api/v1/insight/transfer/total`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gives a summary of the transfers made by the user, grouped by asset account or lability. 
         * @summary Insight into transfers, grouped by account.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightTransfers: async (start: string, end: string, accounts?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('insightTransfers', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('insightTransfers', 'end', end)
            const localVarPath = `/api/v1/insight/transfer/asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InsightApi - functional programming interface
 * @export
 */
export const InsightApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InsightApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint gives a summary of the expenses made by the user, grouped by asset account. 
         * @summary Insight into expenses, grouped by asset account.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightExpenseAsset(start: string, end: string, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightExpenseAsset(start, end, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, grouped by (any) bill. 
         * @summary Insight into expenses, grouped by bill.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [bills] The bills to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightExpenseBill(start: string, end: string, bills?: Array<number>, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightExpenseBill(start, end, bills, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, grouped by (any) budget. 
         * @summary Insight into expenses, grouped by budget.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [budgets] The budgets to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightExpenseBudget(start: string, end: string, budgets?: Array<number>, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightExpenseBudget(start, end, budgets, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, grouped by (any) category. 
         * @summary Insight into expenses, grouped by category.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [categories] The categories to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightExpenseCategory(start: string, end: string, categories?: Array<number>, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightExpenseCategory(start, end, categories, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, grouped by expense account. 
         * @summary Insight into expenses, grouped by expense account.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you add the accounts ID\&#39;s of expense accounts, only those accounts are included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. You can combine both asset / liability and expense account ID\&#39;s. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightExpenseExpense(start: string, end: string, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightExpenseExpense(start, end, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, including only expenses with no bill. 
         * @summary Insight into expenses, without bill.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightExpenseNoBill(start: string, end: string, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightTotal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightExpenseNoBill(start, end, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, including only expenses with no budget. 
         * @summary Insight into expenses, without budget.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightExpenseNoBudget(start: string, end: string, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightTotal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightExpenseNoBudget(start, end, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, including only expenses with no category. 
         * @summary Insight into expenses, without category.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightExpenseNoCategory(start: string, end: string, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightTotal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightExpenseNoCategory(start, end, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, including only expenses with no tag. 
         * @summary Insight into expenses, without tag.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightExpenseNoTag(start: string, end: string, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightTotal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightExpenseNoTag(start, end, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, grouped by (any) tag. 
         * @summary Insight into expenses, grouped by tag.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [tags] The tags to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightExpenseTag(start: string, end: string, tags?: Array<number>, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightExpenseTag(start, end, tags, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a sum of the total expenses made by the user. 
         * @summary Insight into total expenses.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightExpenseTotal(start: string, end: string, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightTotal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightExpenseTotal(start, end, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a summary of the income received by the user, grouped by asset account. 
         * @summary Insight into income, grouped by asset account.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightIncomeAsset(start: string, end: string, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightIncomeAsset(start, end, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a summary of the income received by the user, grouped by (any) category. 
         * @summary Insight into income, grouped by category.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [categories] The categories to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightIncomeCategory(start: string, end: string, categories?: Array<number>, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightIncomeCategory(start, end, categories, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a summary of the income received by the user, including only income with no category. 
         * @summary Insight into income, without category.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightIncomeNoCategory(start: string, end: string, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightTotal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightIncomeNoCategory(start, end, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a summary of the income received by the user, including only income with no tag. 
         * @summary Insight into income, without tag.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightIncomeNoTag(start: string, end: string, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightTotal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightIncomeNoTag(start, end, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a summary of the income received by the user, grouped by revenue account. 
         * @summary Insight into income, grouped by revenue account.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you add the accounts ID\&#39;s of revenue accounts, only those accounts are included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. You can combine both asset / liability and deposit account ID\&#39;s. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightIncomeRevenue(start: string, end: string, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightIncomeRevenue(start, end, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a summary of the income received by the user, grouped by (any) tag. 
         * @summary Insight into income, grouped by tag.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [tags] The tags to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightIncomeTag(start: string, end: string, tags?: Array<number>, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightIncomeTag(start, end, tags, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a sum of the total income received by the user. 
         * @summary Insight into total income.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightIncomeTotal(start: string, end: string, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightTotal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightIncomeTotal(start, end, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a summary of the transfers made by the user, grouped by (any) category. 
         * @summary Insight into transfers, grouped by category.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [categories] The categories to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightTransferCategory(start: string, end: string, categories?: Array<number>, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightTransferCategory(start, end, categories, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a summary of the transfers made by the user, including only transfers with no category. 
         * @summary Insight into transfers, without category.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightTransferNoCategory(start: string, end: string, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightTotal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightTransferNoCategory(start, end, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a summary of the transfers made by the user, including only transfers with no tag. 
         * @summary Insight into expenses, without tag.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightTransferNoTag(start: string, end: string, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightTotal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightTransferNoTag(start, end, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a summary of the transfers created by the user, grouped by (any) tag. 
         * @summary Insight into transfers, grouped by tag.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [tags] The tags to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightTransferTag(start: string, end: string, tags?: Array<number>, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightTransferTag(start, end, tags, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a sum of the total amount transfers made by the user. 
         * @summary Insight into total transfers.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightTransferTotal(start: string, end: string, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightTotal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightTransferTotal(start, end, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gives a summary of the transfers made by the user, grouped by asset account or lability. 
         * @summary Insight into transfers, grouped by account.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightTransfers(start: string, end: string, accounts?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsightTransfer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightTransfers(start, end, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InsightApi - factory interface
 * @export
 */
export const InsightApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InsightApiFp(configuration)
    return {
        /**
         * This endpoint gives a summary of the expenses made by the user, grouped by asset account. 
         * @summary Insight into expenses, grouped by asset account.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseAsset(start: string, end: string, accounts?: Array<number>, options?: any): AxiosPromise<InsightGroup> {
            return localVarFp.insightExpenseAsset(start, end, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, grouped by (any) bill. 
         * @summary Insight into expenses, grouped by bill.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [bills] The bills to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseBill(start: string, end: string, bills?: Array<number>, accounts?: Array<number>, options?: any): AxiosPromise<InsightGroup> {
            return localVarFp.insightExpenseBill(start, end, bills, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, grouped by (any) budget. 
         * @summary Insight into expenses, grouped by budget.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [budgets] The budgets to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseBudget(start: string, end: string, budgets?: Array<number>, accounts?: Array<number>, options?: any): AxiosPromise<InsightGroup> {
            return localVarFp.insightExpenseBudget(start, end, budgets, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, grouped by (any) category. 
         * @summary Insight into expenses, grouped by category.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [categories] The categories to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseCategory(start: string, end: string, categories?: Array<number>, accounts?: Array<number>, options?: any): AxiosPromise<InsightGroup> {
            return localVarFp.insightExpenseCategory(start, end, categories, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, grouped by expense account. 
         * @summary Insight into expenses, grouped by expense account.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you add the accounts ID\&#39;s of expense accounts, only those accounts are included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. You can combine both asset / liability and expense account ID\&#39;s. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseExpense(start: string, end: string, accounts?: Array<number>, options?: any): AxiosPromise<InsightGroup> {
            return localVarFp.insightExpenseExpense(start, end, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, including only expenses with no bill. 
         * @summary Insight into expenses, without bill.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseNoBill(start: string, end: string, accounts?: Array<number>, options?: any): AxiosPromise<InsightTotal> {
            return localVarFp.insightExpenseNoBill(start, end, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, including only expenses with no budget. 
         * @summary Insight into expenses, without budget.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseNoBudget(start: string, end: string, accounts?: Array<number>, options?: any): AxiosPromise<InsightTotal> {
            return localVarFp.insightExpenseNoBudget(start, end, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, including only expenses with no category. 
         * @summary Insight into expenses, without category.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseNoCategory(start: string, end: string, accounts?: Array<number>, options?: any): AxiosPromise<InsightTotal> {
            return localVarFp.insightExpenseNoCategory(start, end, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, including only expenses with no tag. 
         * @summary Insight into expenses, without tag.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseNoTag(start: string, end: string, accounts?: Array<number>, options?: any): AxiosPromise<InsightTotal> {
            return localVarFp.insightExpenseNoTag(start, end, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a summary of the expenses made by the user, grouped by (any) tag. 
         * @summary Insight into expenses, grouped by tag.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [tags] The tags to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseTag(start: string, end: string, tags?: Array<number>, accounts?: Array<number>, options?: any): AxiosPromise<InsightGroup> {
            return localVarFp.insightExpenseTag(start, end, tags, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a sum of the total expenses made by the user. 
         * @summary Insight into total expenses.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightExpenseTotal(start: string, end: string, accounts?: Array<number>, options?: any): AxiosPromise<InsightTotal> {
            return localVarFp.insightExpenseTotal(start, end, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a summary of the income received by the user, grouped by asset account. 
         * @summary Insight into income, grouped by asset account.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightIncomeAsset(start: string, end: string, accounts?: Array<number>, options?: any): AxiosPromise<InsightGroup> {
            return localVarFp.insightIncomeAsset(start, end, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a summary of the income received by the user, grouped by (any) category. 
         * @summary Insight into income, grouped by category.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [categories] The categories to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightIncomeCategory(start: string, end: string, categories?: Array<number>, accounts?: Array<number>, options?: any): AxiosPromise<InsightGroup> {
            return localVarFp.insightIncomeCategory(start, end, categories, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a summary of the income received by the user, including only income with no category. 
         * @summary Insight into income, without category.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightIncomeNoCategory(start: string, end: string, accounts?: Array<number>, options?: any): AxiosPromise<InsightTotal> {
            return localVarFp.insightIncomeNoCategory(start, end, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a summary of the income received by the user, including only income with no tag. 
         * @summary Insight into income, without tag.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightIncomeNoTag(start: string, end: string, accounts?: Array<number>, options?: any): AxiosPromise<InsightTotal> {
            return localVarFp.insightIncomeNoTag(start, end, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a summary of the income received by the user, grouped by revenue account. 
         * @summary Insight into income, grouped by revenue account.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you add the accounts ID\&#39;s of revenue accounts, only those accounts are included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. You can combine both asset / liability and deposit account ID\&#39;s. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightIncomeRevenue(start: string, end: string, accounts?: Array<number>, options?: any): AxiosPromise<InsightGroup> {
            return localVarFp.insightIncomeRevenue(start, end, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a summary of the income received by the user, grouped by (any) tag. 
         * @summary Insight into income, grouped by tag.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [tags] The tags to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightIncomeTag(start: string, end: string, tags?: Array<number>, accounts?: Array<number>, options?: any): AxiosPromise<InsightGroup> {
            return localVarFp.insightIncomeTag(start, end, tags, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a sum of the total income received by the user. 
         * @summary Insight into total income.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightIncomeTotal(start: string, end: string, accounts?: Array<number>, options?: any): AxiosPromise<InsightTotal> {
            return localVarFp.insightIncomeTotal(start, end, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a summary of the transfers made by the user, grouped by (any) category. 
         * @summary Insight into transfers, grouped by category.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [categories] The categories to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightTransferCategory(start: string, end: string, categories?: Array<number>, accounts?: Array<number>, options?: any): AxiosPromise<InsightGroup> {
            return localVarFp.insightTransferCategory(start, end, categories, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a summary of the transfers made by the user, including only transfers with no category. 
         * @summary Insight into transfers, without category.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightTransferNoCategory(start: string, end: string, accounts?: Array<number>, options?: any): AxiosPromise<InsightTotal> {
            return localVarFp.insightTransferNoCategory(start, end, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a summary of the transfers made by the user, including only transfers with no tag. 
         * @summary Insight into expenses, without tag.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightTransferNoTag(start: string, end: string, accounts?: Array<number>, options?: any): AxiosPromise<InsightTotal> {
            return localVarFp.insightTransferNoTag(start, end, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a summary of the transfers created by the user, grouped by (any) tag. 
         * @summary Insight into transfers, grouped by tag.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [tags] The tags to be included in the results. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightTransferTag(start: string, end: string, tags?: Array<number>, accounts?: Array<number>, options?: any): AxiosPromise<InsightGroup> {
            return localVarFp.insightTransferTag(start, end, tags, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a sum of the total amount transfers made by the user. 
         * @summary Insight into total transfers.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightTransferTotal(start: string, end: string, accounts?: Array<number>, options?: any): AxiosPromise<InsightTotal> {
            return localVarFp.insightTransferTotal(start, end, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gives a summary of the transfers made by the user, grouped by asset account or lability. 
         * @summary Insight into transfers, grouped by account.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {Array<number>} [accounts] The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightTransfers(start: string, end: string, accounts?: Array<number>, options?: any): AxiosPromise<InsightTransfer> {
            return localVarFp.insightTransfers(start, end, accounts, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for insightExpenseAsset operation in InsightApi.
 * @export
 * @interface InsightApiInsightExpenseAssetRequest
 */
export interface InsightApiInsightExpenseAssetRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseAsset
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseAsset
     */
    readonly end: string

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightExpenseAsset
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightExpenseBill operation in InsightApi.
 * @export
 * @interface InsightApiInsightExpenseBillRequest
 */
export interface InsightApiInsightExpenseBillRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseBill
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseBill
     */
    readonly end: string

    /**
     * The bills to be included in the results. 
     * @type {Array<number>}
     * @memberof InsightApiInsightExpenseBill
     */
    readonly bills?: Array<number>

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightExpenseBill
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightExpenseBudget operation in InsightApi.
 * @export
 * @interface InsightApiInsightExpenseBudgetRequest
 */
export interface InsightApiInsightExpenseBudgetRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseBudget
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseBudget
     */
    readonly end: string

    /**
     * The budgets to be included in the results. 
     * @type {Array<number>}
     * @memberof InsightApiInsightExpenseBudget
     */
    readonly budgets?: Array<number>

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightExpenseBudget
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightExpenseCategory operation in InsightApi.
 * @export
 * @interface InsightApiInsightExpenseCategoryRequest
 */
export interface InsightApiInsightExpenseCategoryRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseCategory
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseCategory
     */
    readonly end: string

    /**
     * The categories to be included in the results. 
     * @type {Array<number>}
     * @memberof InsightApiInsightExpenseCategory
     */
    readonly categories?: Array<number>

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightExpenseCategory
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightExpenseExpense operation in InsightApi.
 * @export
 * @interface InsightApiInsightExpenseExpenseRequest
 */
export interface InsightApiInsightExpenseExpenseRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseExpense
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseExpense
     */
    readonly end: string

    /**
     * The accounts to be included in the results. If you add the accounts ID\&#39;s of expense accounts, only those accounts are included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. You can combine both asset / liability and expense account ID\&#39;s. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightExpenseExpense
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightExpenseNoBill operation in InsightApi.
 * @export
 * @interface InsightApiInsightExpenseNoBillRequest
 */
export interface InsightApiInsightExpenseNoBillRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseNoBill
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseNoBill
     */
    readonly end: string

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightExpenseNoBill
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightExpenseNoBudget operation in InsightApi.
 * @export
 * @interface InsightApiInsightExpenseNoBudgetRequest
 */
export interface InsightApiInsightExpenseNoBudgetRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseNoBudget
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseNoBudget
     */
    readonly end: string

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightExpenseNoBudget
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightExpenseNoCategory operation in InsightApi.
 * @export
 * @interface InsightApiInsightExpenseNoCategoryRequest
 */
export interface InsightApiInsightExpenseNoCategoryRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseNoCategory
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseNoCategory
     */
    readonly end: string

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightExpenseNoCategory
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightExpenseNoTag operation in InsightApi.
 * @export
 * @interface InsightApiInsightExpenseNoTagRequest
 */
export interface InsightApiInsightExpenseNoTagRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseNoTag
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseNoTag
     */
    readonly end: string

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightExpenseNoTag
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightExpenseTag operation in InsightApi.
 * @export
 * @interface InsightApiInsightExpenseTagRequest
 */
export interface InsightApiInsightExpenseTagRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseTag
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseTag
     */
    readonly end: string

    /**
     * The tags to be included in the results. 
     * @type {Array<number>}
     * @memberof InsightApiInsightExpenseTag
     */
    readonly tags?: Array<number>

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightExpenseTag
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightExpenseTotal operation in InsightApi.
 * @export
 * @interface InsightApiInsightExpenseTotalRequest
 */
export interface InsightApiInsightExpenseTotalRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseTotal
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightExpenseTotal
     */
    readonly end: string

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightExpenseTotal
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightIncomeAsset operation in InsightApi.
 * @export
 * @interface InsightApiInsightIncomeAssetRequest
 */
export interface InsightApiInsightIncomeAssetRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightIncomeAsset
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightIncomeAsset
     */
    readonly end: string

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightIncomeAsset
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightIncomeCategory operation in InsightApi.
 * @export
 * @interface InsightApiInsightIncomeCategoryRequest
 */
export interface InsightApiInsightIncomeCategoryRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightIncomeCategory
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightIncomeCategory
     */
    readonly end: string

    /**
     * The categories to be included in the results. 
     * @type {Array<number>}
     * @memberof InsightApiInsightIncomeCategory
     */
    readonly categories?: Array<number>

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightIncomeCategory
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightIncomeNoCategory operation in InsightApi.
 * @export
 * @interface InsightApiInsightIncomeNoCategoryRequest
 */
export interface InsightApiInsightIncomeNoCategoryRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightIncomeNoCategory
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightIncomeNoCategory
     */
    readonly end: string

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightIncomeNoCategory
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightIncomeNoTag operation in InsightApi.
 * @export
 * @interface InsightApiInsightIncomeNoTagRequest
 */
export interface InsightApiInsightIncomeNoTagRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightIncomeNoTag
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightIncomeNoTag
     */
    readonly end: string

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightIncomeNoTag
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightIncomeRevenue operation in InsightApi.
 * @export
 * @interface InsightApiInsightIncomeRevenueRequest
 */
export interface InsightApiInsightIncomeRevenueRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightIncomeRevenue
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightIncomeRevenue
     */
    readonly end: string

    /**
     * The accounts to be included in the results. If you add the accounts ID\&#39;s of revenue accounts, only those accounts are included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. You can combine both asset / liability and deposit account ID\&#39;s. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightIncomeRevenue
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightIncomeTag operation in InsightApi.
 * @export
 * @interface InsightApiInsightIncomeTagRequest
 */
export interface InsightApiInsightIncomeTagRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightIncomeTag
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightIncomeTag
     */
    readonly end: string

    /**
     * The tags to be included in the results. 
     * @type {Array<number>}
     * @memberof InsightApiInsightIncomeTag
     */
    readonly tags?: Array<number>

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightIncomeTag
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightIncomeTotal operation in InsightApi.
 * @export
 * @interface InsightApiInsightIncomeTotalRequest
 */
export interface InsightApiInsightIncomeTotalRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightIncomeTotal
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightIncomeTotal
     */
    readonly end: string

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightIncomeTotal
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightTransferCategory operation in InsightApi.
 * @export
 * @interface InsightApiInsightTransferCategoryRequest
 */
export interface InsightApiInsightTransferCategoryRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightTransferCategory
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightTransferCategory
     */
    readonly end: string

    /**
     * The categories to be included in the results. 
     * @type {Array<number>}
     * @memberof InsightApiInsightTransferCategory
     */
    readonly categories?: Array<number>

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightTransferCategory
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightTransferNoCategory operation in InsightApi.
 * @export
 * @interface InsightApiInsightTransferNoCategoryRequest
 */
export interface InsightApiInsightTransferNoCategoryRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightTransferNoCategory
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightTransferNoCategory
     */
    readonly end: string

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightTransferNoCategory
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightTransferNoTag operation in InsightApi.
 * @export
 * @interface InsightApiInsightTransferNoTagRequest
 */
export interface InsightApiInsightTransferNoTagRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightTransferNoTag
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightTransferNoTag
     */
    readonly end: string

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers from those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightTransferNoTag
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightTransferTag operation in InsightApi.
 * @export
 * @interface InsightApiInsightTransferTagRequest
 */
export interface InsightApiInsightTransferTagRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightTransferTag
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightTransferTag
     */
    readonly end: string

    /**
     * The tags to be included in the results. 
     * @type {Array<number>}
     * @memberof InsightApiInsightTransferTag
     */
    readonly tags?: Array<number>

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightTransferTag
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightTransferTotal operation in InsightApi.
 * @export
 * @interface InsightApiInsightTransferTotalRequest
 */
export interface InsightApiInsightTransferTotalRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightTransferTotal
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightTransferTotal
     */
    readonly end: string

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightTransferTotal
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for insightTransfers operation in InsightApi.
 * @export
 * @interface InsightApiInsightTransfersRequest
 */
export interface InsightApiInsightTransfersRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightTransfers
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof InsightApiInsightTransfers
     */
    readonly end: string

    /**
     * The accounts to be included in the results. If you include ID\&#39;s of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID\&#39;s will be ignored. 
     * @type {Array<number>}
     * @memberof InsightApiInsightTransfers
     */
    readonly accounts?: Array<number>
}

/**
 * InsightApi - object-oriented interface
 * @export
 * @class InsightApi
 * @extends {BaseAPI}
 */
export class InsightApi extends BaseAPI {
    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by asset account. 
     * @summary Insight into expenses, grouped by asset account.
     * @param {InsightApiInsightExpenseAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightExpenseAsset(requestParameters: InsightApiInsightExpenseAssetRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightExpenseAsset(requestParameters.start, requestParameters.end, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) bill. 
     * @summary Insight into expenses, grouped by bill.
     * @param {InsightApiInsightExpenseBillRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightExpenseBill(requestParameters: InsightApiInsightExpenseBillRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightExpenseBill(requestParameters.start, requestParameters.end, requestParameters.bills, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) budget. 
     * @summary Insight into expenses, grouped by budget.
     * @param {InsightApiInsightExpenseBudgetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightExpenseBudget(requestParameters: InsightApiInsightExpenseBudgetRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightExpenseBudget(requestParameters.start, requestParameters.end, requestParameters.budgets, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) category. 
     * @summary Insight into expenses, grouped by category.
     * @param {InsightApiInsightExpenseCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightExpenseCategory(requestParameters: InsightApiInsightExpenseCategoryRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightExpenseCategory(requestParameters.start, requestParameters.end, requestParameters.categories, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by expense account. 
     * @summary Insight into expenses, grouped by expense account.
     * @param {InsightApiInsightExpenseExpenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightExpenseExpense(requestParameters: InsightApiInsightExpenseExpenseRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightExpenseExpense(requestParameters.start, requestParameters.end, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no bill. 
     * @summary Insight into expenses, without bill.
     * @param {InsightApiInsightExpenseNoBillRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightExpenseNoBill(requestParameters: InsightApiInsightExpenseNoBillRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightExpenseNoBill(requestParameters.start, requestParameters.end, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no budget. 
     * @summary Insight into expenses, without budget.
     * @param {InsightApiInsightExpenseNoBudgetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightExpenseNoBudget(requestParameters: InsightApiInsightExpenseNoBudgetRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightExpenseNoBudget(requestParameters.start, requestParameters.end, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no category. 
     * @summary Insight into expenses, without category.
     * @param {InsightApiInsightExpenseNoCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightExpenseNoCategory(requestParameters: InsightApiInsightExpenseNoCategoryRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightExpenseNoCategory(requestParameters.start, requestParameters.end, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no tag. 
     * @summary Insight into expenses, without tag.
     * @param {InsightApiInsightExpenseNoTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightExpenseNoTag(requestParameters: InsightApiInsightExpenseNoTagRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightExpenseNoTag(requestParameters.start, requestParameters.end, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) tag. 
     * @summary Insight into expenses, grouped by tag.
     * @param {InsightApiInsightExpenseTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightExpenseTag(requestParameters: InsightApiInsightExpenseTagRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightExpenseTag(requestParameters.start, requestParameters.end, requestParameters.tags, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a sum of the total expenses made by the user. 
     * @summary Insight into total expenses.
     * @param {InsightApiInsightExpenseTotalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightExpenseTotal(requestParameters: InsightApiInsightExpenseTotalRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightExpenseTotal(requestParameters.start, requestParameters.end, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a summary of the income received by the user, grouped by asset account. 
     * @summary Insight into income, grouped by asset account.
     * @param {InsightApiInsightIncomeAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightIncomeAsset(requestParameters: InsightApiInsightIncomeAssetRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightIncomeAsset(requestParameters.start, requestParameters.end, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a summary of the income received by the user, grouped by (any) category. 
     * @summary Insight into income, grouped by category.
     * @param {InsightApiInsightIncomeCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightIncomeCategory(requestParameters: InsightApiInsightIncomeCategoryRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightIncomeCategory(requestParameters.start, requestParameters.end, requestParameters.categories, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a summary of the income received by the user, including only income with no category. 
     * @summary Insight into income, without category.
     * @param {InsightApiInsightIncomeNoCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightIncomeNoCategory(requestParameters: InsightApiInsightIncomeNoCategoryRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightIncomeNoCategory(requestParameters.start, requestParameters.end, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a summary of the income received by the user, including only income with no tag. 
     * @summary Insight into income, without tag.
     * @param {InsightApiInsightIncomeNoTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightIncomeNoTag(requestParameters: InsightApiInsightIncomeNoTagRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightIncomeNoTag(requestParameters.start, requestParameters.end, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a summary of the income received by the user, grouped by revenue account. 
     * @summary Insight into income, grouped by revenue account.
     * @param {InsightApiInsightIncomeRevenueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightIncomeRevenue(requestParameters: InsightApiInsightIncomeRevenueRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightIncomeRevenue(requestParameters.start, requestParameters.end, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a summary of the income received by the user, grouped by (any) tag. 
     * @summary Insight into income, grouped by tag.
     * @param {InsightApiInsightIncomeTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightIncomeTag(requestParameters: InsightApiInsightIncomeTagRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightIncomeTag(requestParameters.start, requestParameters.end, requestParameters.tags, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a sum of the total income received by the user. 
     * @summary Insight into total income.
     * @param {InsightApiInsightIncomeTotalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightIncomeTotal(requestParameters: InsightApiInsightIncomeTotalRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightIncomeTotal(requestParameters.start, requestParameters.end, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a summary of the transfers made by the user, grouped by (any) category. 
     * @summary Insight into transfers, grouped by category.
     * @param {InsightApiInsightTransferCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightTransferCategory(requestParameters: InsightApiInsightTransferCategoryRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightTransferCategory(requestParameters.start, requestParameters.end, requestParameters.categories, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a summary of the transfers made by the user, including only transfers with no category. 
     * @summary Insight into transfers, without category.
     * @param {InsightApiInsightTransferNoCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightTransferNoCategory(requestParameters: InsightApiInsightTransferNoCategoryRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightTransferNoCategory(requestParameters.start, requestParameters.end, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a summary of the transfers made by the user, including only transfers with no tag. 
     * @summary Insight into expenses, without tag.
     * @param {InsightApiInsightTransferNoTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightTransferNoTag(requestParameters: InsightApiInsightTransferNoTagRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightTransferNoTag(requestParameters.start, requestParameters.end, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a summary of the transfers created by the user, grouped by (any) tag. 
     * @summary Insight into transfers, grouped by tag.
     * @param {InsightApiInsightTransferTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightTransferTag(requestParameters: InsightApiInsightTransferTagRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightTransferTag(requestParameters.start, requestParameters.end, requestParameters.tags, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a sum of the total amount transfers made by the user. 
     * @summary Insight into total transfers.
     * @param {InsightApiInsightTransferTotalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightTransferTotal(requestParameters: InsightApiInsightTransferTotalRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightTransferTotal(requestParameters.start, requestParameters.end, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gives a summary of the transfers made by the user, grouped by asset account or lability. 
     * @summary Insight into transfers, grouped by account.
     * @param {InsightApiInsightTransfersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public insightTransfers(requestParameters: InsightApiInsightTransfersRequest, options?: AxiosRequestConfig) {
        return InsightApiFp(this.configuration).insightTransfers(requestParameters.start, requestParameters.end, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }
}
