/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00 
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AttachmentArray } from '../model';
// @ts-ignore
import { BillArray } from '../model';
// @ts-ignore
import { BillSingle } from '../model';
// @ts-ignore
import { BillStore } from '../model';
// @ts-ignore
import { BillUpdate } from '../model';
// @ts-ignore
import { RuleArray } from '../model';
// @ts-ignore
import { TransactionArray } from '../model';
// @ts-ignore
import { TransactionTypeFilter } from '../model';
// @ts-ignore
import { ValidationError } from '../model';
/**
 * BillsApi - axios parameter creator
 * @export
 */
export const BillsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a bill. This will not delete any associated rules. Will not remove associated transactions. WILL remove all associated attachments.
         * @summary Delete a bill.
         * @param {string} id The ID of the bill.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBill: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBill', 'id', id)
            const localVarPath = `/api/v1/bills/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single bill.
         * @summary Get a single bill.
         * @param {string} id The ID of the bill.
         * @param {string} [start] A date formatted YYYY-MM-DD. If it is are added to the request, Firefly III will calculate the appropriate payment and paid dates. 
         * @param {string} [end] A date formatted YYYY-MM-DD. If it is added to the request, Firefly III will calculate the appropriate payment and paid dates. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBill: async (id: string, start?: string, end?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBill', 'id', id)
            const localVarPath = `/api/v1/bills/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint will list all attachments linked to the bill.
         * @summary List all attachments uploaded to the bill.
         * @param {string} id The ID of the bill.
         * @param {number} [page] Page number. The default pagination is 50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAttachmentByBill: async (id: string, page?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listAttachmentByBill', 'id', id)
            const localVarPath = `/api/v1/bills/{id}/attachments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint will list all the user\'s bills.
         * @summary List all bills.
         * @param {number} [page] Page number. The default pagination is 50.
         * @param {string} [start] A date formatted YYYY-MM-DD. If it is are added to the request, Firefly III will calculate the appropriate payment and paid dates. 
         * @param {string} [end] A date formatted YYYY-MM-DD. If it is added to the request, Firefly III will calculate the appropriate payment and paid dates. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBill: async (page?: number, start?: string, end?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/bills`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint will list all rules that have an action to set the bill to this bill.
         * @summary List all rules associated with the bill.
         * @param {string} id The ID of the bill.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRuleByBill: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listRuleByBill', 'id', id)
            const localVarPath = `/api/v1/bills/{id}/rules`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint will list all transactions linked to this bill.
         * @summary List all transactions associated with the  bill.
         * @param {string} id The ID of the bill.
         * @param {string} [start] A date formatted YYYY-MM-DD. 
         * @param {string} [end] A date formatted YYYY-MM-DD. 
         * @param {TransactionTypeFilter} [type] Optional filter on the transaction type(s) returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactionByBill: async (id: string, start?: string, end?: string, type?: TransactionTypeFilter, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listTransactionByBill', 'id', id)
            const localVarPath = `/api/v1/bills/{id}/transactions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new bill. The data required can be submitted as a JSON body or as a list of parameters.
         * @summary Store a new bill
         * @param {BillStore} billStore JSON array or key&#x3D;value pairs with the necessary bill information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeBill: async (billStore: BillStore, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'billStore' is not null or undefined
            assertParamExists('storeBill', 'billStore', billStore)
            const localVarPath = `/api/v1/bills`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(billStore, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update existing bill.
         * @summary Update existing bill.
         * @param {string} id The ID of the bill.
         * @param {BillUpdate} billUpdate JSON array or key&#x3D;value pairs with updated bill information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBill: async (id: string, billUpdate: BillUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBill', 'id', id)
            // verify required parameter 'billUpdate' is not null or undefined
            assertParamExists('updateBill', 'billUpdate', billUpdate)
            const localVarPath = `/api/v1/bills/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(billUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BillsApi - functional programming interface
 * @export
 */
export const BillsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BillsApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a bill. This will not delete any associated rules. Will not remove associated transactions. WILL remove all associated attachments.
         * @summary Delete a bill.
         * @param {string} id The ID of the bill.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBill(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBill(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a single bill.
         * @summary Get a single bill.
         * @param {string} id The ID of the bill.
         * @param {string} [start] A date formatted YYYY-MM-DD. If it is are added to the request, Firefly III will calculate the appropriate payment and paid dates. 
         * @param {string} [end] A date formatted YYYY-MM-DD. If it is added to the request, Firefly III will calculate the appropriate payment and paid dates. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBill(id: string, start?: string, end?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBill(id, start, end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint will list all attachments linked to the bill.
         * @summary List all attachments uploaded to the bill.
         * @param {string} id The ID of the bill.
         * @param {number} [page] Page number. The default pagination is 50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAttachmentByBill(id: string, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttachmentArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAttachmentByBill(id, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint will list all the user\'s bills.
         * @summary List all bills.
         * @param {number} [page] Page number. The default pagination is 50.
         * @param {string} [start] A date formatted YYYY-MM-DD. If it is are added to the request, Firefly III will calculate the appropriate payment and paid dates. 
         * @param {string} [end] A date formatted YYYY-MM-DD. If it is added to the request, Firefly III will calculate the appropriate payment and paid dates. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBill(page?: number, start?: string, end?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBill(page, start, end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint will list all rules that have an action to set the bill to this bill.
         * @summary List all rules associated with the bill.
         * @param {string} id The ID of the bill.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRuleByBill(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRuleByBill(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint will list all transactions linked to this bill.
         * @summary List all transactions associated with the  bill.
         * @param {string} id The ID of the bill.
         * @param {string} [start] A date formatted YYYY-MM-DD. 
         * @param {string} [end] A date formatted YYYY-MM-DD. 
         * @param {TransactionTypeFilter} [type] Optional filter on the transaction type(s) returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTransactionByBill(id: string, start?: string, end?: string, type?: TransactionTypeFilter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTransactionByBill(id, start, end, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new bill. The data required can be submitted as a JSON body or as a list of parameters.
         * @summary Store a new bill
         * @param {BillStore} billStore JSON array or key&#x3D;value pairs with the necessary bill information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeBill(billStore: BillStore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeBill(billStore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update existing bill.
         * @summary Update existing bill.
         * @param {string} id The ID of the bill.
         * @param {BillUpdate} billUpdate JSON array or key&#x3D;value pairs with updated bill information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBill(id: string, billUpdate: BillUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBill(id, billUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BillsApi - factory interface
 * @export
 */
export const BillsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BillsApiFp(configuration)
    return {
        /**
         * Delete a bill. This will not delete any associated rules. Will not remove associated transactions. WILL remove all associated attachments.
         * @summary Delete a bill.
         * @param {string} id The ID of the bill.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBill(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteBill(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single bill.
         * @summary Get a single bill.
         * @param {string} id The ID of the bill.
         * @param {string} [start] A date formatted YYYY-MM-DD. If it is are added to the request, Firefly III will calculate the appropriate payment and paid dates. 
         * @param {string} [end] A date formatted YYYY-MM-DD. If it is added to the request, Firefly III will calculate the appropriate payment and paid dates. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBill(id: string, start?: string, end?: string, options?: any): AxiosPromise<BillSingle> {
            return localVarFp.getBill(id, start, end, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will list all attachments linked to the bill.
         * @summary List all attachments uploaded to the bill.
         * @param {string} id The ID of the bill.
         * @param {number} [page] Page number. The default pagination is 50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAttachmentByBill(id: string, page?: number, options?: any): AxiosPromise<AttachmentArray> {
            return localVarFp.listAttachmentByBill(id, page, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will list all the user\'s bills.
         * @summary List all bills.
         * @param {number} [page] Page number. The default pagination is 50.
         * @param {string} [start] A date formatted YYYY-MM-DD. If it is are added to the request, Firefly III will calculate the appropriate payment and paid dates. 
         * @param {string} [end] A date formatted YYYY-MM-DD. If it is added to the request, Firefly III will calculate the appropriate payment and paid dates. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBill(page?: number, start?: string, end?: string, options?: any): AxiosPromise<BillArray> {
            return localVarFp.listBill(page, start, end, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will list all rules that have an action to set the bill to this bill.
         * @summary List all rules associated with the bill.
         * @param {string} id The ID of the bill.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRuleByBill(id: string, options?: any): AxiosPromise<RuleArray> {
            return localVarFp.listRuleByBill(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will list all transactions linked to this bill.
         * @summary List all transactions associated with the  bill.
         * @param {string} id The ID of the bill.
         * @param {string} [start] A date formatted YYYY-MM-DD. 
         * @param {string} [end] A date formatted YYYY-MM-DD. 
         * @param {TransactionTypeFilter} [type] Optional filter on the transaction type(s) returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactionByBill(id: string, start?: string, end?: string, type?: TransactionTypeFilter, options?: any): AxiosPromise<TransactionArray> {
            return localVarFp.listTransactionByBill(id, start, end, type, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new bill. The data required can be submitted as a JSON body or as a list of parameters.
         * @summary Store a new bill
         * @param {BillStore} billStore JSON array or key&#x3D;value pairs with the necessary bill information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeBill(billStore: BillStore, options?: any): AxiosPromise<BillSingle> {
            return localVarFp.storeBill(billStore, options).then((request) => request(axios, basePath));
        },
        /**
         * Update existing bill.
         * @summary Update existing bill.
         * @param {string} id The ID of the bill.
         * @param {BillUpdate} billUpdate JSON array or key&#x3D;value pairs with updated bill information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBill(id: string, billUpdate: BillUpdate, options?: any): AxiosPromise<BillSingle> {
            return localVarFp.updateBill(id, billUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteBill operation in BillsApi.
 * @export
 * @interface BillsApiDeleteBillRequest
 */
export interface BillsApiDeleteBillRequest {
    /**
     * The ID of the bill.
     * @type {string}
     * @memberof BillsApiDeleteBill
     */
    readonly id: string
}

/**
 * Request parameters for getBill operation in BillsApi.
 * @export
 * @interface BillsApiGetBillRequest
 */
export interface BillsApiGetBillRequest {
    /**
     * The ID of the bill.
     * @type {string}
     * @memberof BillsApiGetBill
     */
    readonly id: string

    /**
     * A date formatted YYYY-MM-DD. If it is are added to the request, Firefly III will calculate the appropriate payment and paid dates. 
     * @type {string}
     * @memberof BillsApiGetBill
     */
    readonly start?: string

    /**
     * A date formatted YYYY-MM-DD. If it is added to the request, Firefly III will calculate the appropriate payment and paid dates. 
     * @type {string}
     * @memberof BillsApiGetBill
     */
    readonly end?: string
}

/**
 * Request parameters for listAttachmentByBill operation in BillsApi.
 * @export
 * @interface BillsApiListAttachmentByBillRequest
 */
export interface BillsApiListAttachmentByBillRequest {
    /**
     * The ID of the bill.
     * @type {string}
     * @memberof BillsApiListAttachmentByBill
     */
    readonly id: string

    /**
     * Page number. The default pagination is 50.
     * @type {number}
     * @memberof BillsApiListAttachmentByBill
     */
    readonly page?: number
}

/**
 * Request parameters for listBill operation in BillsApi.
 * @export
 * @interface BillsApiListBillRequest
 */
export interface BillsApiListBillRequest {
    /**
     * Page number. The default pagination is 50.
     * @type {number}
     * @memberof BillsApiListBill
     */
    readonly page?: number

    /**
     * A date formatted YYYY-MM-DD. If it is are added to the request, Firefly III will calculate the appropriate payment and paid dates. 
     * @type {string}
     * @memberof BillsApiListBill
     */
    readonly start?: string

    /**
     * A date formatted YYYY-MM-DD. If it is added to the request, Firefly III will calculate the appropriate payment and paid dates. 
     * @type {string}
     * @memberof BillsApiListBill
     */
    readonly end?: string
}

/**
 * Request parameters for listRuleByBill operation in BillsApi.
 * @export
 * @interface BillsApiListRuleByBillRequest
 */
export interface BillsApiListRuleByBillRequest {
    /**
     * The ID of the bill.
     * @type {string}
     * @memberof BillsApiListRuleByBill
     */
    readonly id: string
}

/**
 * Request parameters for listTransactionByBill operation in BillsApi.
 * @export
 * @interface BillsApiListTransactionByBillRequest
 */
export interface BillsApiListTransactionByBillRequest {
    /**
     * The ID of the bill.
     * @type {string}
     * @memberof BillsApiListTransactionByBill
     */
    readonly id: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof BillsApiListTransactionByBill
     */
    readonly start?: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof BillsApiListTransactionByBill
     */
    readonly end?: string

    /**
     * Optional filter on the transaction type(s) returned
     * @type {TransactionTypeFilter}
     * @memberof BillsApiListTransactionByBill
     */
    readonly type?: TransactionTypeFilter
}

/**
 * Request parameters for storeBill operation in BillsApi.
 * @export
 * @interface BillsApiStoreBillRequest
 */
export interface BillsApiStoreBillRequest {
    /**
     * JSON array or key&#x3D;value pairs with the necessary bill information. See the model for the exact specifications.
     * @type {BillStore}
     * @memberof BillsApiStoreBill
     */
    readonly billStore: BillStore
}

/**
 * Request parameters for updateBill operation in BillsApi.
 * @export
 * @interface BillsApiUpdateBillRequest
 */
export interface BillsApiUpdateBillRequest {
    /**
     * The ID of the bill.
     * @type {string}
     * @memberof BillsApiUpdateBill
     */
    readonly id: string

    /**
     * JSON array or key&#x3D;value pairs with updated bill information. See the model for the exact specifications.
     * @type {BillUpdate}
     * @memberof BillsApiUpdateBill
     */
    readonly billUpdate: BillUpdate
}

/**
 * BillsApi - object-oriented interface
 * @export
 * @class BillsApi
 * @extends {BaseAPI}
 */
export class BillsApi extends BaseAPI {
    /**
     * Delete a bill. This will not delete any associated rules. Will not remove associated transactions. WILL remove all associated attachments.
     * @summary Delete a bill.
     * @param {BillsApiDeleteBillRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillsApi
     */
    public deleteBill(requestParameters: BillsApiDeleteBillRequest, options?: any) {
        return BillsApiFp(this.configuration).deleteBill(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single bill.
     * @summary Get a single bill.
     * @param {BillsApiGetBillRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillsApi
     */
    public getBill(requestParameters: BillsApiGetBillRequest, options?: any) {
        return BillsApiFp(this.configuration).getBill(requestParameters.id, requestParameters.start, requestParameters.end, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint will list all attachments linked to the bill.
     * @summary List all attachments uploaded to the bill.
     * @param {BillsApiListAttachmentByBillRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillsApi
     */
    public listAttachmentByBill(requestParameters: BillsApiListAttachmentByBillRequest, options?: any) {
        return BillsApiFp(this.configuration).listAttachmentByBill(requestParameters.id, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint will list all the user\'s bills.
     * @summary List all bills.
     * @param {BillsApiListBillRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillsApi
     */
    public listBill(requestParameters: BillsApiListBillRequest = {}, options?: any) {
        return BillsApiFp(this.configuration).listBill(requestParameters.page, requestParameters.start, requestParameters.end, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint will list all rules that have an action to set the bill to this bill.
     * @summary List all rules associated with the bill.
     * @param {BillsApiListRuleByBillRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillsApi
     */
    public listRuleByBill(requestParameters: BillsApiListRuleByBillRequest, options?: any) {
        return BillsApiFp(this.configuration).listRuleByBill(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint will list all transactions linked to this bill.
     * @summary List all transactions associated with the  bill.
     * @param {BillsApiListTransactionByBillRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillsApi
     */
    public listTransactionByBill(requestParameters: BillsApiListTransactionByBillRequest, options?: any) {
        return BillsApiFp(this.configuration).listTransactionByBill(requestParameters.id, requestParameters.start, requestParameters.end, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new bill. The data required can be submitted as a JSON body or as a list of parameters.
     * @summary Store a new bill
     * @param {BillsApiStoreBillRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillsApi
     */
    public storeBill(requestParameters: BillsApiStoreBillRequest, options?: any) {
        return BillsApiFp(this.configuration).storeBill(requestParameters.billStore, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update existing bill.
     * @summary Update existing bill.
     * @param {BillsApiUpdateBillRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillsApi
     */
    public updateBill(requestParameters: BillsApiUpdateBillRequest, options?: any) {
        return BillsApiFp(this.configuration).updateBill(requestParameters.id, requestParameters.billUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
