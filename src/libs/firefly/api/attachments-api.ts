/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00 
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AttachmentArray } from '../model';
// @ts-ignore
import { AttachmentSingle } from '../model';
// @ts-ignore
import { AttachmentStore } from '../model';
// @ts-ignore
import { AttachmentUpdate } from '../model';
// @ts-ignore
import { ValidationError } from '../model';
/**
 * AttachmentsApi - axios parameter creator
 * @export
 */
export const AttachmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * With this endpoint you delete an attachment, including any stored file data. 
         * @summary Delete an attachment.
         * @param {string} id The ID of the single.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttachment: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAttachment', 'id', id)
            const localVarPath = `/api/v1/attachments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to download the binary content of a transaction. It will be sent to you as a download, using the content type \"application/octet-stream\" and content disposition \"attachment; filename=example.pdf\". 
         * @summary Download a single attachment.
         * @param {string} id The ID of the attachment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAttachment: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('downloadAttachment', 'id', id)
            const localVarPath = `/api/v1/attachments/{id}/download`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single attachment. This endpoint only returns the available metadata for the attachment. Actual file data is handled in two other endpoints (see below). 
         * @summary Get a single attachment.
         * @param {string} id The ID of the attachment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachment: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAttachment', 'id', id)
            const localVarPath = `/api/v1/attachments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists all attachments. 
         * @summary List all attachments.
         * @param {number} [page] Page number. The default pagination is 50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAttachment: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/attachments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new attachment. The data required can be submitted as a JSON body or as a list of parameters. You cannot use this endpoint to upload the actual file data (see below). This endpoint only creates the attachment object. 
         * @summary Store a new attachment.
         * @param {AttachmentStore} attachmentStore JSON array or key&#x3D;value pairs with the necessary attachment information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeAttachment: async (attachmentStore: AttachmentStore, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attachmentStore' is not null or undefined
            assertParamExists('storeAttachment', 'attachmentStore', attachmentStore)
            const localVarPath = `/api/v1/attachments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attachmentStore, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the meta data for an existing attachment. This endpoint does not allow you to upload or download data. For that, see below. 
         * @summary Update existing attachment.
         * @param {string} id The ID of the attachment.
         * @param {AttachmentUpdate} attachmentUpdate JSON array with updated attachment information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttachment: async (id: string, attachmentUpdate: AttachmentUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAttachment', 'id', id)
            // verify required parameter 'attachmentUpdate' is not null or undefined
            assertParamExists('updateAttachment', 'attachmentUpdate', attachmentUpdate)
            const localVarPath = `/api/v1/attachments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attachmentUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to upload (and possible overwrite) the file contents of an attachment. Simply put the entire file in the body as binary data. 
         * @summary Upload an attachment.
         * @param {string} id The ID of the attachment.
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAttachment: async (id: string, body?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadAttachment', 'id', id)
            const localVarPath = `/api/v1/attachments/{id}/upload`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttachmentsApi - functional programming interface
 * @export
 */
export const AttachmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttachmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * With this endpoint you delete an attachment, including any stored file data. 
         * @summary Delete an attachment.
         * @param {string} id The ID of the single.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAttachment(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAttachment(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to download the binary content of a transaction. It will be sent to you as a download, using the content type \"application/octet-stream\" and content disposition \"attachment; filename=example.pdf\". 
         * @summary Download a single attachment.
         * @param {string} id The ID of the attachment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadAttachment(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadAttachment(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a single attachment. This endpoint only returns the available metadata for the attachment. Actual file data is handled in two other endpoints (see below). 
         * @summary Get a single attachment.
         * @param {string} id The ID of the attachment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttachment(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttachmentSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttachment(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists all attachments. 
         * @summary List all attachments.
         * @param {number} [page] Page number. The default pagination is 50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAttachment(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttachmentArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAttachment(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new attachment. The data required can be submitted as a JSON body or as a list of parameters. You cannot use this endpoint to upload the actual file data (see below). This endpoint only creates the attachment object. 
         * @summary Store a new attachment.
         * @param {AttachmentStore} attachmentStore JSON array or key&#x3D;value pairs with the necessary attachment information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeAttachment(attachmentStore: AttachmentStore, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttachmentSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeAttachment(attachmentStore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the meta data for an existing attachment. This endpoint does not allow you to upload or download data. For that, see below. 
         * @summary Update existing attachment.
         * @param {string} id The ID of the attachment.
         * @param {AttachmentUpdate} attachmentUpdate JSON array with updated attachment information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAttachment(id: string, attachmentUpdate: AttachmentUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttachmentSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAttachment(id, attachmentUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to upload (and possible overwrite) the file contents of an attachment. Simply put the entire file in the body as binary data. 
         * @summary Upload an attachment.
         * @param {string} id The ID of the attachment.
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadAttachment(id: string, body?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadAttachment(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AttachmentsApi - factory interface
 * @export
 */
export const AttachmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttachmentsApiFp(configuration)
    return {
        /**
         * With this endpoint you delete an attachment, including any stored file data. 
         * @summary Delete an attachment.
         * @param {string} id The ID of the single.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttachment(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAttachment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to download the binary content of a transaction. It will be sent to you as a download, using the content type \"application/octet-stream\" and content disposition \"attachment; filename=example.pdf\". 
         * @summary Download a single attachment.
         * @param {string} id The ID of the attachment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAttachment(id: string, options?: any): AxiosPromise<File> {
            return localVarFp.downloadAttachment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single attachment. This endpoint only returns the available metadata for the attachment. Actual file data is handled in two other endpoints (see below). 
         * @summary Get a single attachment.
         * @param {string} id The ID of the attachment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachment(id: string, options?: any): AxiosPromise<AttachmentSingle> {
            return localVarFp.getAttachment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists all attachments. 
         * @summary List all attachments.
         * @param {number} [page] Page number. The default pagination is 50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAttachment(page?: number, options?: any): AxiosPromise<AttachmentArray> {
            return localVarFp.listAttachment(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new attachment. The data required can be submitted as a JSON body or as a list of parameters. You cannot use this endpoint to upload the actual file data (see below). This endpoint only creates the attachment object. 
         * @summary Store a new attachment.
         * @param {AttachmentStore} attachmentStore JSON array or key&#x3D;value pairs with the necessary attachment information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeAttachment(attachmentStore: AttachmentStore, options?: any): AxiosPromise<AttachmentSingle> {
            return localVarFp.storeAttachment(attachmentStore, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the meta data for an existing attachment. This endpoint does not allow you to upload or download data. For that, see below. 
         * @summary Update existing attachment.
         * @param {string} id The ID of the attachment.
         * @param {AttachmentUpdate} attachmentUpdate JSON array with updated attachment information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttachment(id: string, attachmentUpdate: AttachmentUpdate, options?: any): AxiosPromise<AttachmentSingle> {
            return localVarFp.updateAttachment(id, attachmentUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to upload (and possible overwrite) the file contents of an attachment. Simply put the entire file in the body as binary data. 
         * @summary Upload an attachment.
         * @param {string} id The ID of the attachment.
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAttachment(id: string, body?: File, options?: any): AxiosPromise<void> {
            return localVarFp.uploadAttachment(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteAttachment operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiDeleteAttachmentRequest
 */
export interface AttachmentsApiDeleteAttachmentRequest {
    /**
     * The ID of the single.
     * @type {string}
     * @memberof AttachmentsApiDeleteAttachment
     */
    readonly id: string
}

/**
 * Request parameters for downloadAttachment operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiDownloadAttachmentRequest
 */
export interface AttachmentsApiDownloadAttachmentRequest {
    /**
     * The ID of the attachment.
     * @type {string}
     * @memberof AttachmentsApiDownloadAttachment
     */
    readonly id: string
}

/**
 * Request parameters for getAttachment operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiGetAttachmentRequest
 */
export interface AttachmentsApiGetAttachmentRequest {
    /**
     * The ID of the attachment.
     * @type {string}
     * @memberof AttachmentsApiGetAttachment
     */
    readonly id: string
}

/**
 * Request parameters for listAttachment operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiListAttachmentRequest
 */
export interface AttachmentsApiListAttachmentRequest {
    /**
     * Page number. The default pagination is 50.
     * @type {number}
     * @memberof AttachmentsApiListAttachment
     */
    readonly page?: number
}

/**
 * Request parameters for storeAttachment operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiStoreAttachmentRequest
 */
export interface AttachmentsApiStoreAttachmentRequest {
    /**
     * JSON array or key&#x3D;value pairs with the necessary attachment information. See the model for the exact specifications.
     * @type {AttachmentStore}
     * @memberof AttachmentsApiStoreAttachment
     */
    readonly attachmentStore: AttachmentStore
}

/**
 * Request parameters for updateAttachment operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiUpdateAttachmentRequest
 */
export interface AttachmentsApiUpdateAttachmentRequest {
    /**
     * The ID of the attachment.
     * @type {string}
     * @memberof AttachmentsApiUpdateAttachment
     */
    readonly id: string

    /**
     * JSON array with updated attachment information. See the model for the exact specifications.
     * @type {AttachmentUpdate}
     * @memberof AttachmentsApiUpdateAttachment
     */
    readonly attachmentUpdate: AttachmentUpdate
}

/**
 * Request parameters for uploadAttachment operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiUploadAttachmentRequest
 */
export interface AttachmentsApiUploadAttachmentRequest {
    /**
     * The ID of the attachment.
     * @type {string}
     * @memberof AttachmentsApiUploadAttachment
     */
    readonly id: string

    /**
     * 
     * @type {File}
     * @memberof AttachmentsApiUploadAttachment
     */
    readonly body?: File
}

/**
 * AttachmentsApi - object-oriented interface
 * @export
 * @class AttachmentsApi
 * @extends {BaseAPI}
 */
export class AttachmentsApi extends BaseAPI {
    /**
     * With this endpoint you delete an attachment, including any stored file data. 
     * @summary Delete an attachment.
     * @param {AttachmentsApiDeleteAttachmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public deleteAttachment(requestParameters: AttachmentsApiDeleteAttachmentRequest, options?: AxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).deleteAttachment(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to download the binary content of a transaction. It will be sent to you as a download, using the content type \"application/octet-stream\" and content disposition \"attachment; filename=example.pdf\". 
     * @summary Download a single attachment.
     * @param {AttachmentsApiDownloadAttachmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public downloadAttachment(requestParameters: AttachmentsApiDownloadAttachmentRequest, options?: AxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).downloadAttachment(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single attachment. This endpoint only returns the available metadata for the attachment. Actual file data is handled in two other endpoints (see below). 
     * @summary Get a single attachment.
     * @param {AttachmentsApiGetAttachmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public getAttachment(requestParameters: AttachmentsApiGetAttachmentRequest, options?: AxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).getAttachment(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists all attachments. 
     * @summary List all attachments.
     * @param {AttachmentsApiListAttachmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public listAttachment(requestParameters: AttachmentsApiListAttachmentRequest = {}, options?: AxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).listAttachment(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new attachment. The data required can be submitted as a JSON body or as a list of parameters. You cannot use this endpoint to upload the actual file data (see below). This endpoint only creates the attachment object. 
     * @summary Store a new attachment.
     * @param {AttachmentsApiStoreAttachmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public storeAttachment(requestParameters: AttachmentsApiStoreAttachmentRequest, options?: AxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).storeAttachment(requestParameters.attachmentStore, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the meta data for an existing attachment. This endpoint does not allow you to upload or download data. For that, see below. 
     * @summary Update existing attachment.
     * @param {AttachmentsApiUpdateAttachmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public updateAttachment(requestParameters: AttachmentsApiUpdateAttachmentRequest, options?: AxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).updateAttachment(requestParameters.id, requestParameters.attachmentUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to upload (and possible overwrite) the file contents of an attachment. Simply put the entire file in the body as binary data. 
     * @summary Upload an attachment.
     * @param {AttachmentsApiUploadAttachmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public uploadAttachment(requestParameters: AttachmentsApiUploadAttachmentRequest, options?: AxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).uploadAttachment(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
