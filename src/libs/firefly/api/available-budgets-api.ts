/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00 
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AvailableBudgetArray } from '../model';
// @ts-ignore
import { AvailableBudgetSingle } from '../model';
// @ts-ignore
import { AvailableBudgetStore } from '../model';
// @ts-ignore
import { AvailableBudgetUpdate } from '../model';
// @ts-ignore
import { ValidationError } from '../model';
/**
 * AvailableBudgetsApi - axios parameter creator
 * @export
 */
export const AvailableBudgetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete an available budget. Not much more to say.
         * @summary Delete an available budget.
         * @param {string} id The ID of the available budget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAvailableBudget: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAvailableBudget', 'id', id)
            const localVarPath = `/api/v1/available_budgets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single available budget, by ID.
         * @summary Get a single available budget.
         * @param {string} id The ID of the available budget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableBudget: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAvailableBudget', 'id', id)
            const localVarPath = `/api/v1/available_budgets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Firefly III allows users to set the amount that is available to be budgeted in so-called \"available budgets\". For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
         * @summary List all available budget amounts.
         * @param {number} [page] Page number. The default pagination is 50.
         * @param {string} [start] A date formatted YYYY-MM-DD. 
         * @param {string} [end] A date formatted YYYY-MM-DD. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableBudget: async (page?: number, start?: string, end?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/available_budgets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
         * @summary Store a new available budget
         * @param {AvailableBudgetStore} availableBudgetStore JSON array or key&#x3D;value pairs with the necessary available budget information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeAvailableBudget: async (availableBudgetStore: AvailableBudgetStore, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'availableBudgetStore' is not null or undefined
            assertParamExists('storeAvailableBudget', 'availableBudgetStore', availableBudgetStore)
            const localVarPath = `/api/v1/available_budgets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(availableBudgetStore, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update existing available budget.
         * @summary Update existing available budget, to change for example the date range of the amount or the amount itself.
         * @param {string} id The ID of the object.X
         * @param {AvailableBudgetUpdate} availableBudgetUpdate JSON array or form value with updated available budget information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAvailableBudget: async (id: string, availableBudgetUpdate: AvailableBudgetUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAvailableBudget', 'id', id)
            // verify required parameter 'availableBudgetUpdate' is not null or undefined
            assertParamExists('updateAvailableBudget', 'availableBudgetUpdate', availableBudgetUpdate)
            const localVarPath = `/api/v1/available_budgets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(availableBudgetUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AvailableBudgetsApi - functional programming interface
 * @export
 */
export const AvailableBudgetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AvailableBudgetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete an available budget. Not much more to say.
         * @summary Delete an available budget.
         * @param {string} id The ID of the available budget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAvailableBudget(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAvailableBudget(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a single available budget, by ID.
         * @summary Get a single available budget.
         * @param {string} id The ID of the available budget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableBudget(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailableBudgetSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableBudget(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Firefly III allows users to set the amount that is available to be budgeted in so-called \"available budgets\". For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
         * @summary List all available budget amounts.
         * @param {number} [page] Page number. The default pagination is 50.
         * @param {string} [start] A date formatted YYYY-MM-DD. 
         * @param {string} [end] A date formatted YYYY-MM-DD. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAvailableBudget(page?: number, start?: string, end?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailableBudgetArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAvailableBudget(page, start, end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
         * @summary Store a new available budget
         * @param {AvailableBudgetStore} availableBudgetStore JSON array or key&#x3D;value pairs with the necessary available budget information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeAvailableBudget(availableBudgetStore: AvailableBudgetStore, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailableBudgetSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeAvailableBudget(availableBudgetStore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update existing available budget.
         * @summary Update existing available budget, to change for example the date range of the amount or the amount itself.
         * @param {string} id The ID of the object.X
         * @param {AvailableBudgetUpdate} availableBudgetUpdate JSON array or form value with updated available budget information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAvailableBudget(id: string, availableBudgetUpdate: AvailableBudgetUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailableBudgetSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAvailableBudget(id, availableBudgetUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AvailableBudgetsApi - factory interface
 * @export
 */
export const AvailableBudgetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AvailableBudgetsApiFp(configuration)
    return {
        /**
         * Delete an available budget. Not much more to say.
         * @summary Delete an available budget.
         * @param {string} id The ID of the available budget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAvailableBudget(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAvailableBudget(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single available budget, by ID.
         * @summary Get a single available budget.
         * @param {string} id The ID of the available budget.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableBudget(id: string, options?: any): AxiosPromise<AvailableBudgetSingle> {
            return localVarFp.getAvailableBudget(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Firefly III allows users to set the amount that is available to be budgeted in so-called \"available budgets\". For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
         * @summary List all available budget amounts.
         * @param {number} [page] Page number. The default pagination is 50.
         * @param {string} [start] A date formatted YYYY-MM-DD. 
         * @param {string} [end] A date formatted YYYY-MM-DD. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableBudget(page?: number, start?: string, end?: string, options?: any): AxiosPromise<AvailableBudgetArray> {
            return localVarFp.listAvailableBudget(page, start, end, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
         * @summary Store a new available budget
         * @param {AvailableBudgetStore} availableBudgetStore JSON array or key&#x3D;value pairs with the necessary available budget information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeAvailableBudget(availableBudgetStore: AvailableBudgetStore, options?: any): AxiosPromise<AvailableBudgetSingle> {
            return localVarFp.storeAvailableBudget(availableBudgetStore, options).then((request) => request(axios, basePath));
        },
        /**
         * Update existing available budget.
         * @summary Update existing available budget, to change for example the date range of the amount or the amount itself.
         * @param {string} id The ID of the object.X
         * @param {AvailableBudgetUpdate} availableBudgetUpdate JSON array or form value with updated available budget information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAvailableBudget(id: string, availableBudgetUpdate: AvailableBudgetUpdate, options?: any): AxiosPromise<AvailableBudgetSingle> {
            return localVarFp.updateAvailableBudget(id, availableBudgetUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteAvailableBudget operation in AvailableBudgetsApi.
 * @export
 * @interface AvailableBudgetsApiDeleteAvailableBudgetRequest
 */
export interface AvailableBudgetsApiDeleteAvailableBudgetRequest {
    /**
     * The ID of the available budget.
     * @type {string}
     * @memberof AvailableBudgetsApiDeleteAvailableBudget
     */
    readonly id: string
}

/**
 * Request parameters for getAvailableBudget operation in AvailableBudgetsApi.
 * @export
 * @interface AvailableBudgetsApiGetAvailableBudgetRequest
 */
export interface AvailableBudgetsApiGetAvailableBudgetRequest {
    /**
     * The ID of the available budget.
     * @type {string}
     * @memberof AvailableBudgetsApiGetAvailableBudget
     */
    readonly id: string
}

/**
 * Request parameters for listAvailableBudget operation in AvailableBudgetsApi.
 * @export
 * @interface AvailableBudgetsApiListAvailableBudgetRequest
 */
export interface AvailableBudgetsApiListAvailableBudgetRequest {
    /**
     * Page number. The default pagination is 50.
     * @type {number}
     * @memberof AvailableBudgetsApiListAvailableBudget
     */
    readonly page?: number

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof AvailableBudgetsApiListAvailableBudget
     */
    readonly start?: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof AvailableBudgetsApiListAvailableBudget
     */
    readonly end?: string
}

/**
 * Request parameters for storeAvailableBudget operation in AvailableBudgetsApi.
 * @export
 * @interface AvailableBudgetsApiStoreAvailableBudgetRequest
 */
export interface AvailableBudgetsApiStoreAvailableBudgetRequest {
    /**
     * JSON array or key&#x3D;value pairs with the necessary available budget information. See the model for the exact specifications.
     * @type {AvailableBudgetStore}
     * @memberof AvailableBudgetsApiStoreAvailableBudget
     */
    readonly availableBudgetStore: AvailableBudgetStore
}

/**
 * Request parameters for updateAvailableBudget operation in AvailableBudgetsApi.
 * @export
 * @interface AvailableBudgetsApiUpdateAvailableBudgetRequest
 */
export interface AvailableBudgetsApiUpdateAvailableBudgetRequest {
    /**
     * The ID of the object.X
     * @type {string}
     * @memberof AvailableBudgetsApiUpdateAvailableBudget
     */
    readonly id: string

    /**
     * JSON array or form value with updated available budget information. See the model for the exact specifications.
     * @type {AvailableBudgetUpdate}
     * @memberof AvailableBudgetsApiUpdateAvailableBudget
     */
    readonly availableBudgetUpdate: AvailableBudgetUpdate
}

/**
 * AvailableBudgetsApi - object-oriented interface
 * @export
 * @class AvailableBudgetsApi
 * @extends {BaseAPI}
 */
export class AvailableBudgetsApi extends BaseAPI {
    /**
     * Delete an available budget. Not much more to say.
     * @summary Delete an available budget.
     * @param {AvailableBudgetsApiDeleteAvailableBudgetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailableBudgetsApi
     */
    public deleteAvailableBudget(requestParameters: AvailableBudgetsApiDeleteAvailableBudgetRequest, options?: AxiosRequestConfig) {
        return AvailableBudgetsApiFp(this.configuration).deleteAvailableBudget(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single available budget, by ID.
     * @summary Get a single available budget.
     * @param {AvailableBudgetsApiGetAvailableBudgetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailableBudgetsApi
     */
    public getAvailableBudget(requestParameters: AvailableBudgetsApiGetAvailableBudgetRequest, options?: AxiosRequestConfig) {
        return AvailableBudgetsApiFp(this.configuration).getAvailableBudget(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Firefly III allows users to set the amount that is available to be budgeted in so-called \"available budgets\". For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
     * @summary List all available budget amounts.
     * @param {AvailableBudgetsApiListAvailableBudgetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailableBudgetsApi
     */
    public listAvailableBudget(requestParameters: AvailableBudgetsApiListAvailableBudgetRequest = {}, options?: AxiosRequestConfig) {
        return AvailableBudgetsApiFp(this.configuration).listAvailableBudget(requestParameters.page, requestParameters.start, requestParameters.end, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
     * @summary Store a new available budget
     * @param {AvailableBudgetsApiStoreAvailableBudgetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailableBudgetsApi
     */
    public storeAvailableBudget(requestParameters: AvailableBudgetsApiStoreAvailableBudgetRequest, options?: AxiosRequestConfig) {
        return AvailableBudgetsApiFp(this.configuration).storeAvailableBudget(requestParameters.availableBudgetStore, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update existing available budget.
     * @summary Update existing available budget, to change for example the date range of the amount or the amount itself.
     * @param {AvailableBudgetsApiUpdateAvailableBudgetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailableBudgetsApi
     */
    public updateAvailableBudget(requestParameters: AvailableBudgetsApiUpdateAvailableBudgetRequest, options?: AxiosRequestConfig) {
        return AvailableBudgetsApiFp(this.configuration).updateAvailableBudget(requestParameters.id, requestParameters.availableBudgetUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
