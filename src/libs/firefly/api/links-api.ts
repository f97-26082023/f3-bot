/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00 
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LinkType } from '../model';
// @ts-ignore
import { LinkTypeArray } from '../model';
// @ts-ignore
import { LinkTypeSingle } from '../model';
// @ts-ignore
import { LinkTypeUpdate } from '../model';
// @ts-ignore
import { TransactionArray } from '../model';
// @ts-ignore
import { TransactionLinkArray } from '../model';
// @ts-ignore
import { TransactionLinkSingle } from '../model';
// @ts-ignore
import { TransactionLinkStore } from '../model';
// @ts-ignore
import { TransactionLinkUpdate } from '../model';
// @ts-ignore
import { TransactionTypeFilter } from '../model';
// @ts-ignore
import { ValidationError } from '../model';
/**
 * LinksApi - axios parameter creator
 * @export
 */
export const LinksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Will permanently delete a link type. The links between transactions will be removed. The transactions themselves remain. You cannot delete some of the system provided link types, indicated by the editable=false flag when you list it. 
         * @summary Permanently delete link type.
         * @param {string} id The ID of the link type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLinkType: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteLinkType', 'id', id)
            const localVarPath = `/api/v1/link_types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Will permanently delete link. Transactions remain. 
         * @summary Permanently delete link between transactions.
         * @param {string} id The ID of the transaction link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransactionLink: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTransactionLink', 'id', id)
            const localVarPath = `/api/v1/transaction_links/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single link type by its ID. 
         * @summary Get single a link type.
         * @param {string} id The ID of the link type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLinkType: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLinkType', 'id', id)
            const localVarPath = `/api/v1/link_types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single link by its ID. 
         * @summary Get a single link.
         * @param {string} id The ID of the transaction link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionLink: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTransactionLink', 'id', id)
            const localVarPath = `/api/v1/transaction_links/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all the link types the system has. These include the default ones as well as any new ones. 
         * @summary List all types of links.
         * @param {number} [page] Page number. The default pagination is 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLinkType: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/link_types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all transactions under this link type, both the inward and outward transactions. 
         * @summary List all transactions under this link type.
         * @param {string} id The ID of the link type.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {string} [start] A date formatted YYYY-MM-DD, to limit the results. 
         * @param {string} [end] A date formatted YYYY-MM-DD, to limit the results. 
         * @param {TransactionTypeFilter} [type] Optional filter on the transaction type(s) returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactionByLinkType: async (id: string, page?: number, start?: string, end?: string, type?: TransactionTypeFilter, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listTransactionByLinkType', 'id', id)
            const localVarPath = `/api/v1/link_types/{id}/transactions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all the transaction links. 
         * @summary List all transaction links.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactionLink: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/transaction_links`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new link type. The data required can be submitted as a JSON body or as a list of parameters (in key=value pairs, like a webform).
         * @summary Create a new link type
         * @param {LinkType} linkType JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeLinkType: async (linkType: LinkType, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'linkType' is not null or undefined
            assertParamExists('storeLinkType', 'linkType', linkType)
            const localVarPath = `/api/v1/link_types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(linkType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Store a new link between two transactions. For this end point you need the journal_id from a transaction.
         * @summary Create a new link between transactions
         * @param {TransactionLinkStore} transactionLinkStore JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeTransactionLink: async (transactionLinkStore: TransactionLinkStore, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionLinkStore' is not null or undefined
            assertParamExists('storeTransactionLink', 'transactionLinkStore', transactionLinkStore)
            const localVarPath = `/api/v1/transaction_links`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionLinkStore, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Used to update a single link type. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory. You cannot update some of the system provided link types, indicated by the editable=false flag when you list it. 
         * @summary Update existing link type.
         * @param {string} id The ID of the link type.
         * @param {LinkTypeUpdate} linkTypeUpdate JSON array or formdata with updated link type information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLinkType: async (id: string, linkTypeUpdate: LinkTypeUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateLinkType', 'id', id)
            // verify required parameter 'linkTypeUpdate' is not null or undefined
            assertParamExists('updateLinkType', 'linkTypeUpdate', linkTypeUpdate)
            const localVarPath = `/api/v1/link_types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(linkTypeUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Used to update a single existing link. 
         * @summary Update an existing link between transactions.
         * @param {string} id The ID of the transaction link.
         * @param {TransactionLinkUpdate} transactionLinkUpdate JSON array or formdata with updated link type information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransactionLink: async (id: string, transactionLinkUpdate: TransactionLinkUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTransactionLink', 'id', id)
            // verify required parameter 'transactionLinkUpdate' is not null or undefined
            assertParamExists('updateTransactionLink', 'transactionLinkUpdate', transactionLinkUpdate)
            const localVarPath = `/api/v1/transaction_links/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionLinkUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LinksApi - functional programming interface
 * @export
 */
export const LinksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LinksApiAxiosParamCreator(configuration)
    return {
        /**
         * Will permanently delete a link type. The links between transactions will be removed. The transactions themselves remain. You cannot delete some of the system provided link types, indicated by the editable=false flag when you list it. 
         * @summary Permanently delete link type.
         * @param {string} id The ID of the link type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLinkType(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLinkType(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Will permanently delete link. Transactions remain. 
         * @summary Permanently delete link between transactions.
         * @param {string} id The ID of the transaction link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTransactionLink(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTransactionLink(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single link type by its ID. 
         * @summary Get single a link type.
         * @param {string} id The ID of the link type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLinkType(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkTypeSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLinkType(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single link by its ID. 
         * @summary Get a single link.
         * @param {string} id The ID of the transaction link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactionLink(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionLinkSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactionLink(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all the link types the system has. These include the default ones as well as any new ones. 
         * @summary List all types of links.
         * @param {number} [page] Page number. The default pagination is 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLinkType(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkTypeArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLinkType(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all transactions under this link type, both the inward and outward transactions. 
         * @summary List all transactions under this link type.
         * @param {string} id The ID of the link type.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {string} [start] A date formatted YYYY-MM-DD, to limit the results. 
         * @param {string} [end] A date formatted YYYY-MM-DD, to limit the results. 
         * @param {TransactionTypeFilter} [type] Optional filter on the transaction type(s) returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTransactionByLinkType(id: string, page?: number, start?: string, end?: string, type?: TransactionTypeFilter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTransactionByLinkType(id, page, start, end, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all the transaction links. 
         * @summary List all transaction links.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTransactionLink(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionLinkArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTransactionLink(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new link type. The data required can be submitted as a JSON body or as a list of parameters (in key=value pairs, like a webform).
         * @summary Create a new link type
         * @param {LinkType} linkType JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeLinkType(linkType: LinkType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkTypeSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeLinkType(linkType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Store a new link between two transactions. For this end point you need the journal_id from a transaction.
         * @summary Create a new link between transactions
         * @param {TransactionLinkStore} transactionLinkStore JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeTransactionLink(transactionLinkStore: TransactionLinkStore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionLinkSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeTransactionLink(transactionLinkStore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Used to update a single link type. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory. You cannot update some of the system provided link types, indicated by the editable=false flag when you list it. 
         * @summary Update existing link type.
         * @param {string} id The ID of the link type.
         * @param {LinkTypeUpdate} linkTypeUpdate JSON array or formdata with updated link type information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLinkType(id: string, linkTypeUpdate: LinkTypeUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkTypeSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLinkType(id, linkTypeUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Used to update a single existing link. 
         * @summary Update an existing link between transactions.
         * @param {string} id The ID of the transaction link.
         * @param {TransactionLinkUpdate} transactionLinkUpdate JSON array or formdata with updated link type information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTransactionLink(id: string, transactionLinkUpdate: TransactionLinkUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionLinkSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTransactionLink(id, transactionLinkUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LinksApi - factory interface
 * @export
 */
export const LinksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LinksApiFp(configuration)
    return {
        /**
         * Will permanently delete a link type. The links between transactions will be removed. The transactions themselves remain. You cannot delete some of the system provided link types, indicated by the editable=false flag when you list it. 
         * @summary Permanently delete link type.
         * @param {string} id The ID of the link type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLinkType(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteLinkType(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Will permanently delete link. Transactions remain. 
         * @summary Permanently delete link between transactions.
         * @param {string} id The ID of the transaction link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransactionLink(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTransactionLink(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single link type by its ID. 
         * @summary Get single a link type.
         * @param {string} id The ID of the link type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLinkType(id: string, options?: any): AxiosPromise<LinkTypeSingle> {
            return localVarFp.getLinkType(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single link by its ID. 
         * @summary Get a single link.
         * @param {string} id The ID of the transaction link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionLink(id: string, options?: any): AxiosPromise<TransactionLinkSingle> {
            return localVarFp.getTransactionLink(id, options).then((request) => request(axios, basePath));
        },
        /**
         * List all the link types the system has. These include the default ones as well as any new ones. 
         * @summary List all types of links.
         * @param {number} [page] Page number. The default pagination is 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLinkType(page?: number, options?: any): AxiosPromise<LinkTypeArray> {
            return localVarFp.listLinkType(page, options).then((request) => request(axios, basePath));
        },
        /**
         * List all transactions under this link type, both the inward and outward transactions. 
         * @summary List all transactions under this link type.
         * @param {string} id The ID of the link type.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {string} [start] A date formatted YYYY-MM-DD, to limit the results. 
         * @param {string} [end] A date formatted YYYY-MM-DD, to limit the results. 
         * @param {TransactionTypeFilter} [type] Optional filter on the transaction type(s) returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactionByLinkType(id: string, page?: number, start?: string, end?: string, type?: TransactionTypeFilter, options?: any): AxiosPromise<TransactionArray> {
            return localVarFp.listTransactionByLinkType(id, page, start, end, type, options).then((request) => request(axios, basePath));
        },
        /**
         * List all the transaction links. 
         * @summary List all transaction links.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransactionLink(page?: number, options?: any): AxiosPromise<TransactionLinkArray> {
            return localVarFp.listTransactionLink(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new link type. The data required can be submitted as a JSON body or as a list of parameters (in key=value pairs, like a webform).
         * @summary Create a new link type
         * @param {LinkType} linkType JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeLinkType(linkType: LinkType, options?: any): AxiosPromise<LinkTypeSingle> {
            return localVarFp.storeLinkType(linkType, options).then((request) => request(axios, basePath));
        },
        /**
         * Store a new link between two transactions. For this end point you need the journal_id from a transaction.
         * @summary Create a new link between transactions
         * @param {TransactionLinkStore} transactionLinkStore JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeTransactionLink(transactionLinkStore: TransactionLinkStore, options?: any): AxiosPromise<TransactionLinkSingle> {
            return localVarFp.storeTransactionLink(transactionLinkStore, options).then((request) => request(axios, basePath));
        },
        /**
         * Used to update a single link type. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory. You cannot update some of the system provided link types, indicated by the editable=false flag when you list it. 
         * @summary Update existing link type.
         * @param {string} id The ID of the link type.
         * @param {LinkTypeUpdate} linkTypeUpdate JSON array or formdata with updated link type information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLinkType(id: string, linkTypeUpdate: LinkTypeUpdate, options?: any): AxiosPromise<LinkTypeSingle> {
            return localVarFp.updateLinkType(id, linkTypeUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Used to update a single existing link. 
         * @summary Update an existing link between transactions.
         * @param {string} id The ID of the transaction link.
         * @param {TransactionLinkUpdate} transactionLinkUpdate JSON array or formdata with updated link type information. See the model for the exact specifications.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransactionLink(id: string, transactionLinkUpdate: TransactionLinkUpdate, options?: any): AxiosPromise<TransactionLinkSingle> {
            return localVarFp.updateTransactionLink(id, transactionLinkUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteLinkType operation in LinksApi.
 * @export
 * @interface LinksApiDeleteLinkTypeRequest
 */
export interface LinksApiDeleteLinkTypeRequest {
    /**
     * The ID of the link type.
     * @type {string}
     * @memberof LinksApiDeleteLinkType
     */
    readonly id: string
}

/**
 * Request parameters for deleteTransactionLink operation in LinksApi.
 * @export
 * @interface LinksApiDeleteTransactionLinkRequest
 */
export interface LinksApiDeleteTransactionLinkRequest {
    /**
     * The ID of the transaction link.
     * @type {string}
     * @memberof LinksApiDeleteTransactionLink
     */
    readonly id: string
}

/**
 * Request parameters for getLinkType operation in LinksApi.
 * @export
 * @interface LinksApiGetLinkTypeRequest
 */
export interface LinksApiGetLinkTypeRequest {
    /**
     * The ID of the link type.
     * @type {string}
     * @memberof LinksApiGetLinkType
     */
    readonly id: string
}

/**
 * Request parameters for getTransactionLink operation in LinksApi.
 * @export
 * @interface LinksApiGetTransactionLinkRequest
 */
export interface LinksApiGetTransactionLinkRequest {
    /**
     * The ID of the transaction link.
     * @type {string}
     * @memberof LinksApiGetTransactionLink
     */
    readonly id: string
}

/**
 * Request parameters for listLinkType operation in LinksApi.
 * @export
 * @interface LinksApiListLinkTypeRequest
 */
export interface LinksApiListLinkTypeRequest {
    /**
     * Page number. The default pagination is 50 items.
     * @type {number}
     * @memberof LinksApiListLinkType
     */
    readonly page?: number
}

/**
 * Request parameters for listTransactionByLinkType operation in LinksApi.
 * @export
 * @interface LinksApiListTransactionByLinkTypeRequest
 */
export interface LinksApiListTransactionByLinkTypeRequest {
    /**
     * The ID of the link type.
     * @type {string}
     * @memberof LinksApiListTransactionByLinkType
     */
    readonly id: string

    /**
     * Page number. The default pagination is per 50 items.
     * @type {number}
     * @memberof LinksApiListTransactionByLinkType
     */
    readonly page?: number

    /**
     * A date formatted YYYY-MM-DD, to limit the results. 
     * @type {string}
     * @memberof LinksApiListTransactionByLinkType
     */
    readonly start?: string

    /**
     * A date formatted YYYY-MM-DD, to limit the results. 
     * @type {string}
     * @memberof LinksApiListTransactionByLinkType
     */
    readonly end?: string

    /**
     * Optional filter on the transaction type(s) returned.
     * @type {TransactionTypeFilter}
     * @memberof LinksApiListTransactionByLinkType
     */
    readonly type?: TransactionTypeFilter
}

/**
 * Request parameters for listTransactionLink operation in LinksApi.
 * @export
 * @interface LinksApiListTransactionLinkRequest
 */
export interface LinksApiListTransactionLinkRequest {
    /**
     * Page number. The default pagination is per 50 items.
     * @type {number}
     * @memberof LinksApiListTransactionLink
     */
    readonly page?: number
}

/**
 * Request parameters for storeLinkType operation in LinksApi.
 * @export
 * @interface LinksApiStoreLinkTypeRequest
 */
export interface LinksApiStoreLinkTypeRequest {
    /**
     * JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.
     * @type {LinkType}
     * @memberof LinksApiStoreLinkType
     */
    readonly linkType: LinkType
}

/**
 * Request parameters for storeTransactionLink operation in LinksApi.
 * @export
 * @interface LinksApiStoreTransactionLinkRequest
 */
export interface LinksApiStoreTransactionLinkRequest {
    /**
     * JSON array with the necessary link type information or key&#x3D;value pairs. See the model for the exact specifications.
     * @type {TransactionLinkStore}
     * @memberof LinksApiStoreTransactionLink
     */
    readonly transactionLinkStore: TransactionLinkStore
}

/**
 * Request parameters for updateLinkType operation in LinksApi.
 * @export
 * @interface LinksApiUpdateLinkTypeRequest
 */
export interface LinksApiUpdateLinkTypeRequest {
    /**
     * The ID of the link type.
     * @type {string}
     * @memberof LinksApiUpdateLinkType
     */
    readonly id: string

    /**
     * JSON array or formdata with updated link type information. See the model for the exact specifications.
     * @type {LinkTypeUpdate}
     * @memberof LinksApiUpdateLinkType
     */
    readonly linkTypeUpdate: LinkTypeUpdate
}

/**
 * Request parameters for updateTransactionLink operation in LinksApi.
 * @export
 * @interface LinksApiUpdateTransactionLinkRequest
 */
export interface LinksApiUpdateTransactionLinkRequest {
    /**
     * The ID of the transaction link.
     * @type {string}
     * @memberof LinksApiUpdateTransactionLink
     */
    readonly id: string

    /**
     * JSON array or formdata with updated link type information. See the model for the exact specifications.
     * @type {TransactionLinkUpdate}
     * @memberof LinksApiUpdateTransactionLink
     */
    readonly transactionLinkUpdate: TransactionLinkUpdate
}

/**
 * LinksApi - object-oriented interface
 * @export
 * @class LinksApi
 * @extends {BaseAPI}
 */
export class LinksApi extends BaseAPI {
    /**
     * Will permanently delete a link type. The links between transactions will be removed. The transactions themselves remain. You cannot delete some of the system provided link types, indicated by the editable=false flag when you list it. 
     * @summary Permanently delete link type.
     * @param {LinksApiDeleteLinkTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApi
     */
    public deleteLinkType(requestParameters: LinksApiDeleteLinkTypeRequest, options?: any) {
        return LinksApiFp(this.configuration).deleteLinkType(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Will permanently delete link. Transactions remain. 
     * @summary Permanently delete link between transactions.
     * @param {LinksApiDeleteTransactionLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApi
     */
    public deleteTransactionLink(requestParameters: LinksApiDeleteTransactionLinkRequest, options?: any) {
        return LinksApiFp(this.configuration).deleteTransactionLink(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single link type by its ID. 
     * @summary Get single a link type.
     * @param {LinksApiGetLinkTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApi
     */
    public getLinkType(requestParameters: LinksApiGetLinkTypeRequest, options?: any) {
        return LinksApiFp(this.configuration).getLinkType(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single link by its ID. 
     * @summary Get a single link.
     * @param {LinksApiGetTransactionLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApi
     */
    public getTransactionLink(requestParameters: LinksApiGetTransactionLinkRequest, options?: any) {
        return LinksApiFp(this.configuration).getTransactionLink(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all the link types the system has. These include the default ones as well as any new ones. 
     * @summary List all types of links.
     * @param {LinksApiListLinkTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApi
     */
    public listLinkType(requestParameters: LinksApiListLinkTypeRequest = {}, options?: any) {
        return LinksApiFp(this.configuration).listLinkType(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all transactions under this link type, both the inward and outward transactions. 
     * @summary List all transactions under this link type.
     * @param {LinksApiListTransactionByLinkTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApi
     */
    public listTransactionByLinkType(requestParameters: LinksApiListTransactionByLinkTypeRequest, options?: any) {
        return LinksApiFp(this.configuration).listTransactionByLinkType(requestParameters.id, requestParameters.page, requestParameters.start, requestParameters.end, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all the transaction links. 
     * @summary List all transaction links.
     * @param {LinksApiListTransactionLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApi
     */
    public listTransactionLink(requestParameters: LinksApiListTransactionLinkRequest = {}, options?: any) {
        return LinksApiFp(this.configuration).listTransactionLink(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new link type. The data required can be submitted as a JSON body or as a list of parameters (in key=value pairs, like a webform).
     * @summary Create a new link type
     * @param {LinksApiStoreLinkTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApi
     */
    public storeLinkType(requestParameters: LinksApiStoreLinkTypeRequest, options?: any) {
        return LinksApiFp(this.configuration).storeLinkType(requestParameters.linkType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Store a new link between two transactions. For this end point you need the journal_id from a transaction.
     * @summary Create a new link between transactions
     * @param {LinksApiStoreTransactionLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApi
     */
    public storeTransactionLink(requestParameters: LinksApiStoreTransactionLinkRequest, options?: any) {
        return LinksApiFp(this.configuration).storeTransactionLink(requestParameters.transactionLinkStore, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Used to update a single link type. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory. You cannot update some of the system provided link types, indicated by the editable=false flag when you list it. 
     * @summary Update existing link type.
     * @param {LinksApiUpdateLinkTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApi
     */
    public updateLinkType(requestParameters: LinksApiUpdateLinkTypeRequest, options?: any) {
        return LinksApiFp(this.configuration).updateLinkType(requestParameters.id, requestParameters.linkTypeUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Used to update a single existing link. 
     * @summary Update an existing link between transactions.
     * @param {LinksApiUpdateTransactionLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApi
     */
    public updateTransactionLink(requestParameters: LinksApiUpdateTransactionLinkRequest, options?: any) {
        return LinksApiFp(this.configuration).updateTransactionLink(requestParameters.id, requestParameters.transactionLinkUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
