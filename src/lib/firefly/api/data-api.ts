/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00 
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DataDestroyObject } from '../model';
// @ts-ignore
import { ExportFileFilter } from '../model';
/**
 * DataApi - axios parameter creator
 * @export
 */
export const DataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Allows you to update transactions in bulk. 
         * @summary Bulk update transaction properties. For more information, see https://docs.firefly-iii.org/firefly-iii/api/specials
         * @param {string} query The JSON query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateTransactions: async (query: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('bulkUpdateTransactions', 'query', query)
            const localVarPath = `/api/v1/data/bulk/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A call to this endpoint permanently destroys the requested data type. Use it with care and always with user permission. The demo user is incapable of using this endpoint. 
         * @summary Endpoint to destroy user data
         * @param {DataDestroyObject} objects The type of data that you wish to destroy. You can only use one at a time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyData: async (objects: DataDestroyObject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'objects' is not null or undefined
            assertParamExists('destroyData', 'objects', objects)
            const localVarPath = `/api/v1/data/destroy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (objects !== undefined) {
                localVarQueryParameter['objects'] = objects;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to export your accounts from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export account data from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAccounts: async (type?: ExportFileFilter, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/data/export/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to export your bills from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export bills from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportBills: async (type?: ExportFileFilter, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/data/export/bills`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to export your budgets and associated budget data from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export budgets and budget amount data from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportBudgets: async (type?: ExportFileFilter, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/data/export/budgets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to export your categories from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export category data from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportCategories: async (type?: ExportFileFilter, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/data/export/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to export your piggy banks from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export piggy banks from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportPiggies: async (type?: ExportFileFilter, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/data/export/piggy-banks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to export your recurring transactions from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export recurring transaction data from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportRecurring: async (type?: ExportFileFilter, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/data/export/recurring`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to export your rules and rule groups from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export rule groups and rule data from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportRules: async (type?: ExportFileFilter, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/data/export/rules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to export your tags from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export tag data from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportTags: async (type?: ExportFileFilter, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/data/export/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to export transactions from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export transaction data from Firefly III
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {string} [accounts] Limit the export of transactions to these accounts only. Only asset accounts will be accepted. Other types will be silently dropped. 
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportTransactions: async (start: string, end: string, accounts?: string, type?: ExportFileFilter, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('exportTransactions', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('exportTransactions', 'end', end)
            const localVarPath = `/api/v1/data/export/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (accounts !== undefined) {
                localVarQueryParameter['accounts'] = accounts;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataApi - functional programming interface
 * @export
 */
export const DataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataApiAxiosParamCreator(configuration)
    return {
        /**
         * Allows you to update transactions in bulk. 
         * @summary Bulk update transaction properties. For more information, see https://docs.firefly-iii.org/firefly-iii/api/specials
         * @param {string} query The JSON query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkUpdateTransactions(query: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkUpdateTransactions(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A call to this endpoint permanently destroys the requested data type. Use it with care and always with user permission. The demo user is incapable of using this endpoint. 
         * @summary Endpoint to destroy user data
         * @param {DataDestroyObject} objects The type of data that you wish to destroy. You can only use one at a time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyData(objects: DataDestroyObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyData(objects, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to export your accounts from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export account data from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportAccounts(type?: ExportFileFilter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportAccounts(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to export your bills from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export bills from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportBills(type?: ExportFileFilter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportBills(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to export your budgets and associated budget data from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export budgets and budget amount data from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportBudgets(type?: ExportFileFilter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportBudgets(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to export your categories from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export category data from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportCategories(type?: ExportFileFilter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportCategories(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to export your piggy banks from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export piggy banks from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportPiggies(type?: ExportFileFilter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportPiggies(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to export your recurring transactions from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export recurring transaction data from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportRecurring(type?: ExportFileFilter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportRecurring(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to export your rules and rule groups from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export rule groups and rule data from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportRules(type?: ExportFileFilter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportRules(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to export your tags from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export tag data from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportTags(type?: ExportFileFilter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportTags(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to export transactions from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export transaction data from Firefly III
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {string} [accounts] Limit the export of transactions to these accounts only. Only asset accounts will be accepted. Other types will be silently dropped. 
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportTransactions(start: string, end: string, accounts?: string, type?: ExportFileFilter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportTransactions(start, end, accounts, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DataApi - factory interface
 * @export
 */
export const DataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataApiFp(configuration)
    return {
        /**
         * Allows you to update transactions in bulk. 
         * @summary Bulk update transaction properties. For more information, see https://docs.firefly-iii.org/firefly-iii/api/specials
         * @param {string} query The JSON query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateTransactions(query: string, options?: any): AxiosPromise<void> {
            return localVarFp.bulkUpdateTransactions(query, options).then((request) => request(axios, basePath));
        },
        /**
         * A call to this endpoint permanently destroys the requested data type. Use it with care and always with user permission. The demo user is incapable of using this endpoint. 
         * @summary Endpoint to destroy user data
         * @param {DataDestroyObject} objects The type of data that you wish to destroy. You can only use one at a time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyData(objects: DataDestroyObject, options?: any): AxiosPromise<void> {
            return localVarFp.destroyData(objects, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to export your accounts from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export account data from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAccounts(type?: ExportFileFilter, options?: any): AxiosPromise<any> {
            return localVarFp.exportAccounts(type, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to export your bills from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export bills from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportBills(type?: ExportFileFilter, options?: any): AxiosPromise<any> {
            return localVarFp.exportBills(type, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to export your budgets and associated budget data from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export budgets and budget amount data from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportBudgets(type?: ExportFileFilter, options?: any): AxiosPromise<any> {
            return localVarFp.exportBudgets(type, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to export your categories from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export category data from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportCategories(type?: ExportFileFilter, options?: any): AxiosPromise<any> {
            return localVarFp.exportCategories(type, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to export your piggy banks from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export piggy banks from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportPiggies(type?: ExportFileFilter, options?: any): AxiosPromise<any> {
            return localVarFp.exportPiggies(type, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to export your recurring transactions from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export recurring transaction data from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportRecurring(type?: ExportFileFilter, options?: any): AxiosPromise<any> {
            return localVarFp.exportRecurring(type, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to export your rules and rule groups from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export rule groups and rule data from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportRules(type?: ExportFileFilter, options?: any): AxiosPromise<any> {
            return localVarFp.exportRules(type, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to export your tags from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export tag data from Firefly III
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportTags(type?: ExportFileFilter, options?: any): AxiosPromise<any> {
            return localVarFp.exportTags(type, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to export transactions from Firefly III into a file. Currently supports CSV exports only. 
         * @summary Export transaction data from Firefly III
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {string} [accounts] Limit the export of transactions to these accounts only. Only asset accounts will be accepted. Other types will be silently dropped. 
         * @param {ExportFileFilter} [type] The file type the export file (CSV is currently the only option).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportTransactions(start: string, end: string, accounts?: string, type?: ExportFileFilter, options?: any): AxiosPromise<any> {
            return localVarFp.exportTransactions(start, end, accounts, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for bulkUpdateTransactions operation in DataApi.
 * @export
 * @interface DataApiBulkUpdateTransactionsRequest
 */
export interface DataApiBulkUpdateTransactionsRequest {
    /**
     * The JSON query.
     * @type {string}
     * @memberof DataApiBulkUpdateTransactions
     */
    readonly query: string
}

/**
 * Request parameters for destroyData operation in DataApi.
 * @export
 * @interface DataApiDestroyDataRequest
 */
export interface DataApiDestroyDataRequest {
    /**
     * The type of data that you wish to destroy. You can only use one at a time.
     * @type {DataDestroyObject}
     * @memberof DataApiDestroyData
     */
    readonly objects: DataDestroyObject
}

/**
 * Request parameters for exportAccounts operation in DataApi.
 * @export
 * @interface DataApiExportAccountsRequest
 */
export interface DataApiExportAccountsRequest {
    /**
     * The file type the export file (CSV is currently the only option).
     * @type {ExportFileFilter}
     * @memberof DataApiExportAccounts
     */
    readonly type?: ExportFileFilter
}

/**
 * Request parameters for exportBills operation in DataApi.
 * @export
 * @interface DataApiExportBillsRequest
 */
export interface DataApiExportBillsRequest {
    /**
     * The file type the export file (CSV is currently the only option).
     * @type {ExportFileFilter}
     * @memberof DataApiExportBills
     */
    readonly type?: ExportFileFilter
}

/**
 * Request parameters for exportBudgets operation in DataApi.
 * @export
 * @interface DataApiExportBudgetsRequest
 */
export interface DataApiExportBudgetsRequest {
    /**
     * The file type the export file (CSV is currently the only option).
     * @type {ExportFileFilter}
     * @memberof DataApiExportBudgets
     */
    readonly type?: ExportFileFilter
}

/**
 * Request parameters for exportCategories operation in DataApi.
 * @export
 * @interface DataApiExportCategoriesRequest
 */
export interface DataApiExportCategoriesRequest {
    /**
     * The file type the export file (CSV is currently the only option).
     * @type {ExportFileFilter}
     * @memberof DataApiExportCategories
     */
    readonly type?: ExportFileFilter
}

/**
 * Request parameters for exportPiggies operation in DataApi.
 * @export
 * @interface DataApiExportPiggiesRequest
 */
export interface DataApiExportPiggiesRequest {
    /**
     * The file type the export file (CSV is currently the only option).
     * @type {ExportFileFilter}
     * @memberof DataApiExportPiggies
     */
    readonly type?: ExportFileFilter
}

/**
 * Request parameters for exportRecurring operation in DataApi.
 * @export
 * @interface DataApiExportRecurringRequest
 */
export interface DataApiExportRecurringRequest {
    /**
     * The file type the export file (CSV is currently the only option).
     * @type {ExportFileFilter}
     * @memberof DataApiExportRecurring
     */
    readonly type?: ExportFileFilter
}

/**
 * Request parameters for exportRules operation in DataApi.
 * @export
 * @interface DataApiExportRulesRequest
 */
export interface DataApiExportRulesRequest {
    /**
     * The file type the export file (CSV is currently the only option).
     * @type {ExportFileFilter}
     * @memberof DataApiExportRules
     */
    readonly type?: ExportFileFilter
}

/**
 * Request parameters for exportTags operation in DataApi.
 * @export
 * @interface DataApiExportTagsRequest
 */
export interface DataApiExportTagsRequest {
    /**
     * The file type the export file (CSV is currently the only option).
     * @type {ExportFileFilter}
     * @memberof DataApiExportTags
     */
    readonly type?: ExportFileFilter
}

/**
 * Request parameters for exportTransactions operation in DataApi.
 * @export
 * @interface DataApiExportTransactionsRequest
 */
export interface DataApiExportTransactionsRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof DataApiExportTransactions
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof DataApiExportTransactions
     */
    readonly end: string

    /**
     * Limit the export of transactions to these accounts only. Only asset accounts will be accepted. Other types will be silently dropped. 
     * @type {string}
     * @memberof DataApiExportTransactions
     */
    readonly accounts?: string

    /**
     * The file type the export file (CSV is currently the only option).
     * @type {ExportFileFilter}
     * @memberof DataApiExportTransactions
     */
    readonly type?: ExportFileFilter
}

/**
 * DataApi - object-oriented interface
 * @export
 * @class DataApi
 * @extends {BaseAPI}
 */
export class DataApi extends BaseAPI {
    /**
     * Allows you to update transactions in bulk. 
     * @summary Bulk update transaction properties. For more information, see https://docs.firefly-iii.org/firefly-iii/api/specials
     * @param {DataApiBulkUpdateTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public bulkUpdateTransactions(requestParameters: DataApiBulkUpdateTransactionsRequest, options?: any) {
        return DataApiFp(this.configuration).bulkUpdateTransactions(requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A call to this endpoint permanently destroys the requested data type. Use it with care and always with user permission. The demo user is incapable of using this endpoint. 
     * @summary Endpoint to destroy user data
     * @param {DataApiDestroyDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public destroyData(requestParameters: DataApiDestroyDataRequest, options?: any) {
        return DataApiFp(this.configuration).destroyData(requestParameters.objects, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to export your accounts from Firefly III into a file. Currently supports CSV exports only. 
     * @summary Export account data from Firefly III
     * @param {DataApiExportAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public exportAccounts(requestParameters: DataApiExportAccountsRequest = {}, options?: any) {
        return DataApiFp(this.configuration).exportAccounts(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to export your bills from Firefly III into a file. Currently supports CSV exports only. 
     * @summary Export bills from Firefly III
     * @param {DataApiExportBillsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public exportBills(requestParameters: DataApiExportBillsRequest = {}, options?: any) {
        return DataApiFp(this.configuration).exportBills(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to export your budgets and associated budget data from Firefly III into a file. Currently supports CSV exports only. 
     * @summary Export budgets and budget amount data from Firefly III
     * @param {DataApiExportBudgetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public exportBudgets(requestParameters: DataApiExportBudgetsRequest = {}, options?: any) {
        return DataApiFp(this.configuration).exportBudgets(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to export your categories from Firefly III into a file. Currently supports CSV exports only. 
     * @summary Export category data from Firefly III
     * @param {DataApiExportCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public exportCategories(requestParameters: DataApiExportCategoriesRequest = {}, options?: any) {
        return DataApiFp(this.configuration).exportCategories(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to export your piggy banks from Firefly III into a file. Currently supports CSV exports only. 
     * @summary Export piggy banks from Firefly III
     * @param {DataApiExportPiggiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public exportPiggies(requestParameters: DataApiExportPiggiesRequest = {}, options?: any) {
        return DataApiFp(this.configuration).exportPiggies(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to export your recurring transactions from Firefly III into a file. Currently supports CSV exports only. 
     * @summary Export recurring transaction data from Firefly III
     * @param {DataApiExportRecurringRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public exportRecurring(requestParameters: DataApiExportRecurringRequest = {}, options?: any) {
        return DataApiFp(this.configuration).exportRecurring(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to export your rules and rule groups from Firefly III into a file. Currently supports CSV exports only. 
     * @summary Export rule groups and rule data from Firefly III
     * @param {DataApiExportRulesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public exportRules(requestParameters: DataApiExportRulesRequest = {}, options?: any) {
        return DataApiFp(this.configuration).exportRules(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to export your tags from Firefly III into a file. Currently supports CSV exports only. 
     * @summary Export tag data from Firefly III
     * @param {DataApiExportTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public exportTags(requestParameters: DataApiExportTagsRequest = {}, options?: any) {
        return DataApiFp(this.configuration).exportTags(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to export transactions from Firefly III into a file. Currently supports CSV exports only. 
     * @summary Export transaction data from Firefly III
     * @param {DataApiExportTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public exportTransactions(requestParameters: DataApiExportTransactionsRequest, options?: any) {
        return DataApiFp(this.configuration).exportTransactions(requestParameters.start, requestParameters.end, requestParameters.accounts, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }
}
